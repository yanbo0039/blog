const t=JSON.parse('{"key":"v-06fa9b36","path":"/zh/programBlog/ServerSideLanguage/Java/247-Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-wait()%20notify()%E6%96%B9%E6%B3%95.html","title":"Java多线程编程-常用方法-wait() notify()方法","lang":"zh-CN","frontmatter":{"title":"Java多线程编程-常用方法-wait() notify()方法","icon":"page","order":247,"author":"涎涎","date":"2023-01-17T19:24:03.000Z","isOriginal":true,"category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java多线程编程-常用方法-wait() notify()方法"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/247-Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-wait()%20notify()%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java多线程编程-常用方法-wait() notify()方法"}],["meta",{"property":"og:description","content":"247-Java多线程编程-常用方法-wait() notify()方法.md 概念 示例代码 package com.tencent.chapter04.生产消费; //消费者 public class Customer extends Thread { \\tprivate Store store; \\t \\tpublic Customer(Store store) \\t{ \\t\\tthis.store = store; \\t} \\t \\t@Override \\tpublic void run() { \\t\\twhile(true) \\t\\t{ \\t\\t\\tsynchronized (store) {//如果当前线程不是此对象监视器的所有者，则抛出IllegalMonitorStateException \\t\\t\\t\\t \\t\\t\\t\\t//当仓库的当前容量 == 0是，停止消费，等待生产者进行生产 \\t\\t\\t\\twhile(store.count &lt;= 0)//为了避免虚假唤醒，不要使用if判断，使用while循环判断 \\t\\t\\t\\t{ \\t\\t\\t\\t\\ttry { \\t\\t\\t\\t\\t\\tstore.wait();//导致当前的线程等待，直到其他线程调用此store对象的 notify()方法或 notifyAll() 方法 \\t\\t\\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\t\\t\\te.printStackTrace(); \\t\\t\\t\\t\\t} \\t\\t\\t\\t} \\t\\t\\t\\t \\t\\t\\t\\t//出库 \\t\\t\\t\\tstore.out(); \\t\\t\\t\\t//唤醒生产者进行生产 \\t\\t\\t\\tstore.notify(); \\t\\t\\t\\t \\t\\t\\t\\t//休眠一秒 \\t\\t\\t\\ttry { \\t\\t\\t\\t\\tThread.sleep(1000); \\t\\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\t\\te.printStackTrace(); \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\t \\t\\t} \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T13:47:22.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-17T19:24:03.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T13:47:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程编程-常用方法-wait() notify()方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-17T19:24:03.000Z\\",\\"dateModified\\":\\"2023-05-21T13:47:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"247-Java多线程编程-常用方法-wait() notify()方法.md 概念 示例代码 package com.tencent.chapter04.生产消费; //消费者 public class Customer extends Thread { \\tprivate Store store; \\t \\tpublic Customer(Store store) \\t{ \\t\\tthis.store = store; \\t} \\t \\t@Override \\tpublic void run() { \\t\\twhile(true) \\t\\t{ \\t\\t\\tsynchronized (store) {//如果当前线程不是此对象监视器的所有者，则抛出IllegalMonitorStateException \\t\\t\\t\\t \\t\\t\\t\\t//当仓库的当前容量 == 0是，停止消费，等待生产者进行生产 \\t\\t\\t\\twhile(store.count &lt;= 0)//为了避免虚假唤醒，不要使用if判断，使用while循环判断 \\t\\t\\t\\t{ \\t\\t\\t\\t\\ttry { \\t\\t\\t\\t\\t\\tstore.wait();//导致当前的线程等待，直到其他线程调用此store对象的 notify()方法或 notifyAll() 方法 \\t\\t\\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\t\\t\\te.printStackTrace(); \\t\\t\\t\\t\\t} \\t\\t\\t\\t} \\t\\t\\t\\t \\t\\t\\t\\t//出库 \\t\\t\\t\\tstore.out(); \\t\\t\\t\\t//唤醒生产者进行生产 \\t\\t\\t\\tstore.notify(); \\t\\t\\t\\t \\t\\t\\t\\t//休眠一秒 \\t\\t\\t\\ttry { \\t\\t\\t\\t\\tThread.sleep(1000); \\t\\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\t\\te.printStackTrace(); \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\t \\t\\t} \\t} }"},"headers":[],"git":{"createdTime":1684145400000,"updatedTime":1684676842000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":3}]},"readingTime":{"minutes":2.23,"words":668},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/247-Java多线程编程-常用方法-wait() notify()方法.md","localizedDate":"2023年1月17日","excerpt":"<!-- more -->\\n<h1> 247-Java多线程编程-常用方法-wait() notify()<a href=\\"http://xn--nfv31n.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">方法.md</a></h1>\\n<h4> 概念</h4>\\n<figure><img src=\\"/assets/Java_247_1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h4> 示例代码</h4>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter04.生产消费;\\n\\n//消费者\\npublic class Customer extends Thread {\\n\\n\\tprivate Store store;\\n\\t\\n\\tpublic Customer(Store store)\\n\\t{\\n\\t\\tthis.store = store;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\twhile(true)\\n\\t\\t{\\n\\t\\t\\tsynchronized (store) {//如果当前线程不是此对象监视器的所有者，则抛出IllegalMonitorStateException\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//当仓库的当前容量 == 0是，停止消费，等待生产者进行生产\\n\\t\\t\\t\\twhile(store.count &lt;= 0)//为了避免虚假唤醒，不要使用if判断，使用while循环判断\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tstore.wait();//导致当前的线程等待，直到其他线程调用此store对象的 notify()方法或 notifyAll() 方法\\n\\t\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//出库\\n\\t\\t\\t\\tstore.out();\\n\\t\\t\\t\\t//唤醒生产者进行生产\\n\\t\\t\\t\\tstore.notify();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//休眠一秒\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tThread.sleep(1000);\\n\\t\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}\\n\\t}\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
