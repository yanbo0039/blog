const e=JSON.parse('{"key":"v-736b771c","path":"/zh/programBlog/ServerSideLanguage/Java/java291.html","title":"Java浅拷贝和深拷贝简单示例","lang":"zh-CN","frontmatter":{"title":"Java浅拷贝和深拷贝简单示例","icon":"page","sticky":20230701034608,"order":291,"author":"涎涎","date":"2023-07-01T03:46:08.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java291.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java浅拷贝和深拷贝简单示例"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java291.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java浅拷贝和深拷贝简单示例"}],["meta",{"property":"og:description","content":"Java浅拷贝和深拷贝简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Java中也有浅拷贝和深拷贝的概念。 Java中的对象赋值操作（=）和Object.clone()方法都是浅拷贝， 而使用序列化和反序列化实现对象复制则可以实现深拷贝。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-07-01T03:46:08.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java浅拷贝和深拷贝简单示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-01T03:46:08.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java浅拷贝和深拷贝简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Java中也有浅拷贝和深拷贝的概念。 Java中的对象赋值操作（=）和Object.clone()方法都是浅拷贝， 而使用序列化和反序列化实现对象复制则可以实现深拷贝。"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/291-Java浅拷贝和深拷贝简单示例.md","localizedDate":"2023年7月1日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> Java浅拷贝和深拷贝简单示例</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<blockquote>\\n<p>Java中也有浅拷贝和深拷贝的概念。\\nJava中的对象赋值操作（=）和Object.clone()方法都是浅拷贝，\\n而使用序列化和反序列化实现对象复制则可以实现深拷贝。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
