const t=JSON.parse('{"key":"v-7b5a6ec8","path":"/zh/java210/","title":"Java异常处理方式","lang":"zh-CN","frontmatter":{"title":"Java异常处理方式","icon":"page","order":210,"author":"涎涎","date":"2023-01-06T11:27:53.000Z","isOriginal":true,"permalinkPattern":"java210","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java异常处理方式"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/java210/"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java异常处理方式"}],["meta",{"property":"og:description","content":"210-Java异常处理方式.md TryCatch package com.tencent.chapter08; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; /** \\t异常处理方式： \\t\\t抛出异常 -&gt; 捕获异常 -&gt; 处理异常 -&gt; 释放、关闭资源 \\t\\t \\t\\t自行处理（积极处理）： \\t\\t try \\t\\t { \\t\\t \\t可能发生异常的语句; \\t\\t } \\t\\t catch(异常类型 异常引用名) \\t\\t { \\t\\t \\t处理异常的语句； \\t\\t } \\t\\t finally \\t\\t { \\t\\t \\t最终都要执行的语句，常用于释放资源、关闭资源 \\t\\t } \\t\\t \\t\\t 注意： \\t\\t \\t1.try语句块与catch语句块不可分割，是一个完整的语法结构 \\t\\t \\t2.可以同时定义多个catch语句块捕获不同的异常类型 \\t\\t \\t3.当多个catch语句同时定义时，必须根据捕获的异常类型从小到大排序 \\t\\t \\t4.finally语句：无论代码执行return或break语句，还是发生了具体的异常Exception，始终都会执行 \\t\\t \\t 除非执行System.exit(0);退出了系统，finally才不会执行 \\t\\t \\t \\t\\t \\t\\t回避处理（消极处理）： */ public class _02异常处理方式TryCatch { \\tpublic static void catchException() \\t{ \\t\\ttry \\t\\t{ \\t\\t\\t//模拟停电了.......... \\t\\t\\t//System.out.println(\\"准备停电....\\"); \\t\\t\\t//System.exit(0);//退出系统 \\t\\t\\t \\t\\t\\t//1.文件找不到 \\t\\t\\tFileInputStream input = new FileInputStream(new File(\\"说明.txt\\")); \\t\\t\\t \\t\\t\\t//2.空指针异常 \\t\\t\\tString str = null; \\t\\t\\tSystem.out.println(str.length()); \\t\\t\\t \\t\\t\\t//3.数组下标越界 \\t\\t\\tint[] array = new int[]{1,2,3}; \\t\\t\\tfor (int i = 0; i &lt;= array.length; i++) { \\t\\t\\t\\tSystem.out.println(array[i]); \\t\\t\\t} \\t\\t\\t \\t\\t\\t//4.算数异常 \\t\\t\\tint i = 1/0; \\t\\t\\t \\t\\t\\tSystem.out.println(\\"代码终于完整的运行了........\\"); \\t\\t\\treturn; \\t\\t} \\t\\t//JDK1.7新特性，允许在一个catch中同时定义多个异常类型 \\t\\t/*catch(FileNotFoundException | NullPointerException | ArrayIndexOutOfBoundsException | ArithmeticException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\" + e.getMessage()); \\t\\t}*/ \\t\\t//负责捕获\\"文件找不到\\"异常 \\t\\tcatch (FileNotFoundException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"亲爱的，你的&lt;说明.txt&gt;找不到了哦，请查验文件是否异常！\\");//一般记录日志，或者发送邮件、短信 \\t\\t} \\t\\t//负责捕获\\"空指针\\"异常 \\t\\tcatch(NullPointerException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"调用length()方法的对象str为null，不能使用\\"); \\t\\t} \\t\\t//负责捕获\\"数组下标越界\\"异常 \\t\\tcatch(ArrayIndexOutOfBoundsException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"当前数组array长度为3，下标为0-2之间，请确认下标是否合法\\"); \\t\\t} \\t\\t//负责捕获\\"算数异常\\" \\t\\tcatch(ArithmeticException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"除数不能为0\\"); \\t\\t} \\t\\t//负责捕获所有的\\"运行时异常\\" \\t\\tcatch(RuntimeException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\"); \\t\\t} \\t\\t//负责捕获所有的\\"异常（运行时异常，非运行时异常）\\" \\t\\tcatch(Exception e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了异常（运行时异常，非运行时异常），代码有bug了，请查验！！\\"); \\t\\t} \\t\\tfinally \\t\\t{ \\t\\t\\tSystem.out.println(\\"始终都要执行的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\"); \\t\\t} \\t\\tSystem.out.println(\\"-----------------------------------------\\"); \\t} \\t \\tpublic static void main(String[] args) { \\t\\tcatchException(); \\t} \\t }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-28T05:50:51.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-06T11:27:53.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-28T05:50:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java异常处理方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-06T11:27:53.000Z\\",\\"dateModified\\":\\"2023-05-28T05:50:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"210-Java异常处理方式.md TryCatch package com.tencent.chapter08; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; /** \\t异常处理方式： \\t\\t抛出异常 -&gt; 捕获异常 -&gt; 处理异常 -&gt; 释放、关闭资源 \\t\\t \\t\\t自行处理（积极处理）： \\t\\t try \\t\\t { \\t\\t \\t可能发生异常的语句; \\t\\t } \\t\\t catch(异常类型 异常引用名) \\t\\t { \\t\\t \\t处理异常的语句； \\t\\t } \\t\\t finally \\t\\t { \\t\\t \\t最终都要执行的语句，常用于释放资源、关闭资源 \\t\\t } \\t\\t \\t\\t 注意： \\t\\t \\t1.try语句块与catch语句块不可分割，是一个完整的语法结构 \\t\\t \\t2.可以同时定义多个catch语句块捕获不同的异常类型 \\t\\t \\t3.当多个catch语句同时定义时，必须根据捕获的异常类型从小到大排序 \\t\\t \\t4.finally语句：无论代码执行return或break语句，还是发生了具体的异常Exception，始终都会执行 \\t\\t \\t 除非执行System.exit(0);退出了系统，finally才不会执行 \\t\\t \\t \\t\\t \\t\\t回避处理（消极处理）： */ public class _02异常处理方式TryCatch { \\tpublic static void catchException() \\t{ \\t\\ttry \\t\\t{ \\t\\t\\t//模拟停电了.......... \\t\\t\\t//System.out.println(\\"准备停电....\\"); \\t\\t\\t//System.exit(0);//退出系统 \\t\\t\\t \\t\\t\\t//1.文件找不到 \\t\\t\\tFileInputStream input = new FileInputStream(new File(\\"说明.txt\\")); \\t\\t\\t \\t\\t\\t//2.空指针异常 \\t\\t\\tString str = null; \\t\\t\\tSystem.out.println(str.length()); \\t\\t\\t \\t\\t\\t//3.数组下标越界 \\t\\t\\tint[] array = new int[]{1,2,3}; \\t\\t\\tfor (int i = 0; i &lt;= array.length; i++) { \\t\\t\\t\\tSystem.out.println(array[i]); \\t\\t\\t} \\t\\t\\t \\t\\t\\t//4.算数异常 \\t\\t\\tint i = 1/0; \\t\\t\\t \\t\\t\\tSystem.out.println(\\"代码终于完整的运行了........\\"); \\t\\t\\treturn; \\t\\t} \\t\\t//JDK1.7新特性，允许在一个catch中同时定义多个异常类型 \\t\\t/*catch(FileNotFoundException | NullPointerException | ArrayIndexOutOfBoundsException | ArithmeticException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\" + e.getMessage()); \\t\\t}*/ \\t\\t//负责捕获\\"文件找不到\\"异常 \\t\\tcatch (FileNotFoundException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"亲爱的，你的&lt;说明.txt&gt;找不到了哦，请查验文件是否异常！\\");//一般记录日志，或者发送邮件、短信 \\t\\t} \\t\\t//负责捕获\\"空指针\\"异常 \\t\\tcatch(NullPointerException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"调用length()方法的对象str为null，不能使用\\"); \\t\\t} \\t\\t//负责捕获\\"数组下标越界\\"异常 \\t\\tcatch(ArrayIndexOutOfBoundsException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"当前数组array长度为3，下标为0-2之间，请确认下标是否合法\\"); \\t\\t} \\t\\t//负责捕获\\"算数异常\\" \\t\\tcatch(ArithmeticException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"除数不能为0\\"); \\t\\t} \\t\\t//负责捕获所有的\\"运行时异常\\" \\t\\tcatch(RuntimeException e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\"); \\t\\t} \\t\\t//负责捕获所有的\\"异常（运行时异常，非运行时异常）\\" \\t\\tcatch(Exception e) \\t\\t{ \\t\\t\\t//e.printStackTrace();//打印异常堆栈信息 \\t\\t\\tSystem.out.println(\\"发生了异常（运行时异常，非运行时异常），代码有bug了，请查验！！\\"); \\t\\t} \\t\\tfinally \\t\\t{ \\t\\t\\tSystem.out.println(\\"始终都要执行的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\"); \\t\\t} \\t\\tSystem.out.println(\\"-----------------------------------------\\"); \\t} \\t \\tpublic static void main(String[] args) { \\t\\tcatchException(); \\t} \\t }"},"headers":[],"git":{"createdTime":1684701424000,"updatedTime":1685253051000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":2}]},"readingTime":{"minutes":5.98,"words":1793},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/210-Java异常处理方式.md","localizedDate":"2023年1月6日","excerpt":"<!-- more -->\\n<h1> <a href=\\"http://xn--210-Java-dr0oh03bq7bsez73gny9b.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">210-Java异常处理方式.md</a></h1>\\n<ol>\\n<li>TryCatch</li>\\n</ol>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter08;\\n\\nimport java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.FileNotFoundException;\\n\\n/**\\n\\t异常处理方式：\\n\\t\\t抛出异常   -&gt; 捕获异常  -&gt; 处理异常   -&gt; 释放、关闭资源\\n\\t\\t\\n\\t\\t自行处理（积极处理）：\\n\\t\\t    try\\n\\t\\t    {\\n\\t\\t    \\t可能发生异常的语句;\\n\\t\\t    }\\n\\t\\t    catch(异常类型  异常引用名)\\n\\t\\t    {\\n\\t\\t    \\t处理异常的语句；\\n\\t\\t    }\\n\\t\\t    finally\\n\\t\\t    {\\n\\t\\t    \\t最终都要执行的语句，常用于释放资源、关闭资源\\n\\t\\t    }\\n\\t\\t    \\n\\t\\t                注意：\\n\\t\\t    \\t1.try语句块与catch语句块不可分割，是一个完整的语法结构\\n\\t\\t    \\t2.可以同时定义多个catch语句块捕获不同的异常类型\\n\\t\\t    \\t3.当多个catch语句同时定义时，必须根据捕获的异常类型从小到大排序\\n\\t\\t    \\t4.finally语句：无论代码执行return或break语句，还是发生了具体的异常Exception，始终都会执行\\n\\t\\t    \\t                                         除非执行System.exit(0);退出了系统，finally才不会执行\\n\\t\\t    \\t\\n\\t\\t\\n\\t\\t回避处理（消极处理）：\\n */\\npublic class _02异常处理方式TryCatch {\\n\\n\\tpublic static void catchException()\\n\\t{\\n\\t\\ttry \\n\\t\\t{\\n\\t\\t\\t//模拟停电了..........\\n\\t\\t\\t//System.out.println(\\"准备停电....\\");\\n\\t\\t\\t//System.exit(0);//退出系统\\n\\t\\t\\t\\n\\t\\t\\t//1.文件找不到\\n\\t\\t\\tFileInputStream input = new FileInputStream(new File(\\"说明.txt\\"));\\n\\t\\t\\t\\n\\t\\t\\t//2.空指针异常\\n\\t\\t\\tString str = null;\\n\\t\\t\\tSystem.out.println(str.length());\\n\\t\\t\\t\\n\\t\\t\\t//3.数组下标越界\\n\\t\\t\\tint[] array = new int[]{1,2,3};\\n\\t\\t\\tfor (int i = 0; i &lt;= array.length; i++) {\\n\\t\\t\\t\\tSystem.out.println(array[i]);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//4.算数异常\\n\\t\\t\\tint i = 1/0;\\n\\t\\t\\t\\n\\t\\t\\tSystem.out.println(\\"代码终于完整的运行了........\\");\\n\\t\\t\\treturn;\\n\\t\\t} \\n\\t\\t//JDK1.7新特性，允许在一个catch中同时定义多个异常类型\\n\\t\\t/*catch(FileNotFoundException | NullPointerException | ArrayIndexOutOfBoundsException | ArithmeticException e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\" + e.getMessage());\\n\\t\\t}*/\\n\\t\\t//负责捕获\\"文件找不到\\"异常\\n\\t\\tcatch (FileNotFoundException e) \\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"亲爱的，你的&lt;说明.txt&gt;找不到了哦，请查验文件是否异常！\\");//一般记录日志，或者发送邮件、短信\\n\\t\\t}\\n\\t\\t//负责捕获\\"空指针\\"异常\\n\\t\\tcatch(NullPointerException e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"调用length()方法的对象str为null，不能使用\\");\\n\\t\\t}\\n\\t\\t//负责捕获\\"数组下标越界\\"异常\\n\\t\\tcatch(ArrayIndexOutOfBoundsException e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"当前数组array长度为3，下标为0-2之间，请确认下标是否合法\\");\\n\\t\\t}\\n\\t\\t//负责捕获\\"算数异常\\"\\n\\t\\tcatch(ArithmeticException e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"除数不能为0\\");\\n\\t\\t}\\n\\t\\t//负责捕获所有的\\"运行时异常\\"\\n\\t\\tcatch(RuntimeException e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"发生了运行时异常，代码有bug了，请查验！！\\");\\n\\t\\t}\\n\\t\\t//负责捕获所有的\\"异常（运行时异常，非运行时异常）\\"\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\t//e.printStackTrace();//打印异常堆栈信息\\n\\t\\t\\tSystem.out.println(\\"发生了异常（运行时异常，非运行时异常），代码有bug了，请查验！！\\");\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(\\"始终都要执行的代码&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\");\\n\\t\\t}\\n\\t\\tSystem.out.println(\\"-----------------------------------------\\");\\n\\t}\\n\\t\\n\\tpublic static void main(String[] args) {\\n\\t\\tcatchException();\\n\\t}\\n\\t\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
