const t=JSON.parse('{"key":"v-6387a170","path":"/zh/programBlog/ServerSideLanguage/Java/java194.html","title":"Java重写（覆盖）与 重载的区别","lang":"zh-CN","frontmatter":{"title":"Java重写（覆盖）与 重载的区别","icon":"page","order":194,"author":"涎涎","date":"2023-01-05T14:07:41.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java194.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java重写（覆盖）与 重载的区别"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java194.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java重写（覆盖）与 重载的区别"}],["meta",{"property":"og:description","content":"194-Java重写（覆盖）与 重载的区别.md 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 重写（rewrite） | 覆盖（override）:对从父类中继承来的方法进行改造 ​\\t条件：基于继承关系 ​\\t 当子类覆盖或重写父类的方法之后，调用方法时，将调用子类自有覆盖之后的方法 ​ ​\\t原则： ​\\t\\t1.方法名一致 ​\\t\\t2.参数列表一致（参数个数一致、参数类型一致、参数顺序一致） ​\\t\\t3.返回值类型一致 ​\\t\\t4.子类的方法修饰符权限 &gt;= 父类的方法修饰符权限 --------------------------------------------------------- 重载（overload）:基于同一类，调用同一方法名，传入不同的参数，实现同一功能 ​\\t条件：基于同一类 ​ ​\\t原则： ​\\t\\t1.方法名一致 ​\\t\\t2.参数列表不一致（参数个数不一致、参数类型不一致、参数顺序不一致） ​\\t\\t3.返回值类型可以一致，可以不一致"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-13T03:33:51.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-05T14:07:41.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-13T03:33:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java重写（覆盖）与 重载的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-05T14:07:41.000Z\\",\\"dateModified\\":\\"2023-06-13T03:33:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"194-Java重写（覆盖）与 重载的区别.md 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 重写（rewrite） | 覆盖（override）:对从父类中继承来的方法进行改造 ​\\t条件：基于继承关系 ​\\t 当子类覆盖或重写父类的方法之后，调用方法时，将调用子类自有覆盖之后的方法 ​ ​\\t原则： ​\\t\\t1.方法名一致 ​\\t\\t2.参数列表一致（参数个数一致、参数类型一致、参数顺序一致） ​\\t\\t3.返回值类型一致 ​\\t\\t4.子类的方法修饰符权限 &gt;= 父类的方法修饰符权限 --------------------------------------------------------- 重载（overload）:基于同一类，调用同一方法名，传入不同的参数，实现同一功能 ​\\t条件：基于同一类 ​ ​\\t原则： ​\\t\\t1.方法名一致 ​\\t\\t2.参数列表不一致（参数个数不一致、参数类型不一致、参数顺序不一致） ​\\t\\t3.返回值类型可以一致，可以不一致"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1684701424000,"updatedTime":1686627231000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":7}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/194-Java重写（覆盖）与 重载的区别.md","localizedDate":"2023年1月5日","excerpt":"<!-- more -->\\n<h1> 194-Java重写（覆盖）与 <a href=\\"http://xn--mcrqz306fv4utoc.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">重载的区别.md</a></h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<blockquote>\\n<p>重写（rewrite） | 覆盖（override）:对从父类中继承来的方法进行改造</p>\\n<p>​\\t条件：基于继承关系</p>\\n<p>​\\t            当子类覆盖或重写父类的方法之后，调用方法时，将调用子类自有覆盖之后的方法</p>\\n<p>​</p>\\n<p>​\\t原则：</p>\\n<p>​\\t\\t1.方法名一致</p>\\n<p>​\\t\\t2.参数列表一致（参数个数一致、参数类型一致、参数顺序一致）</p>\\n<p>​\\t\\t3.返回值类型一致</p>\\n<p>​\\t\\t4.子类的方法修饰符权限 &gt;= 父类的方法修饰符权限</p>\\n<p>---------------------------------------------------------</p>\\n<p>重载（overload）:基于同一类，调用同一方法名，传入不同的参数，实现同一功能</p>\\n<p>​\\t条件：基于同一类</p>\\n<p>​</p>\\n<p>​\\t原则：</p>\\n<p>​\\t\\t1.方法名一致</p>\\n<p>​\\t\\t2.参数列表不一致（参数个数不一致、参数类型不一致、参数顺序不一致）</p>\\n<p>​\\t\\t3.返回值类型可以一致，可以不一致</p>\\n</blockquote>","autoDesc":true}');export{t as data};
