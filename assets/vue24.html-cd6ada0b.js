const e=JSON.parse('{"key":"v-31d6117e","path":"/zh/programBlog/ClientSideLanguage/Vue/vue24.html","title":"如何够设计出高扩展性的前端应用","lang":"zh-CN","frontmatter":{"title":"如何够设计出高扩展性的前端应用","icon":"page","sticky":20230630191603,"order":24,"author":"涎涎","date":"2023-06-30T19:16:03.000Z","isOriginal":true,"permalinkPattern":"programBlog/ClientSideLanguage/Vue/vue24.html","category":["Vue"],"tag":["Vue"],"head":[["meta",{"name":"keywords","content":"如何够设计出高扩展性的前端应用"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ClientSideLanguage/Vue/vue24.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"如何够设计出高扩展性的前端应用"}],["meta",{"property":"og:description","content":"如何够设计出高扩展性的前端应用 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 要设计出高扩展性的前端应用，可以从以下几个方面入手： 模块化设计：将应用拆分为多个模块，每个模块负责一个特定的功能或业务逻辑。模块之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将购物车、商品列表、订单等功能拆分为不同的模块。 组件化设计：将页面或应用拆分为多个组件，每个组件负责一个特定的UI元素或功能。组件之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将商品列表、商品详情、购物车等功能拆分为不同的组件。 配置化设计：将应用的配置信息（如接口地址、参数、样式等）独立出来，以便于动态修改和扩展。例如，一个电商应用可以将接口地址、商品分类、颜色等信息独立出来，以便于动态修改和扩展。 插件化设计：允许第三方开发者编写插件来扩展应用的功能。插件应该具有良好的接口设计和文档说明，以便于其他开发者使用和扩展。例如，一个电商应用可以允许第三方开发者编写商品推荐、评价等插件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2023-06-30T19:16:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何够设计出高扩展性的前端应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-30T19:16:03.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"如何够设计出高扩展性的前端应用 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 要设计出高扩展性的前端应用，可以从以下几个方面入手： 模块化设计：将应用拆分为多个模块，每个模块负责一个特定的功能或业务逻辑。模块之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将购物车、商品列表、订单等功能拆分为不同的模块。 组件化设计：将页面或应用拆分为多个组件，每个组件负责一个特定的UI元素或功能。组件之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将商品列表、商品详情、购物车等功能拆分为不同的组件。 配置化设计：将应用的配置信息（如接口地址、参数、样式等）独立出来，以便于动态修改和扩展。例如，一个电商应用可以将接口地址、商品分类、颜色等信息独立出来，以便于动态修改和扩展。 插件化设计：允许第三方开发者编写插件来扩展应用的功能。插件应该具有良好的接口设计和文档说明，以便于其他开发者使用和扩展。例如，一个电商应用可以允许第三方开发者编写商品推荐、评价等插件。"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":2.34,"words":701},"filePathRelative":"zh/programBlog/ClientSideLanguage/Vue/24-如何够设计出高扩展性的前端应用.md","localizedDate":"2023年6月30日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> 如何够设计出高扩展性的前端应用</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<ul>\\n<li>要设计出高扩展性的前端应用，可以从以下几个方面入手：</li>\\n</ul>\\n<ol>\\n<li>\\n<p>模块化设计：将应用拆分为多个模块，每个模块负责一个特定的功能或业务逻辑。模块之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将购物车、商品列表、订单等功能拆分为不同的模块。</p>\\n</li>\\n<li>\\n<p>组件化设计：将页面或应用拆分为多个组件，每个组件负责一个特定的UI元素或功能。组件之间应该尽可能地解耦，以便于独立开发和维护。例如，一个电商应用可以将商品列表、商品详情、购物车等功能拆分为不同的组件。</p>\\n</li>\\n<li>\\n<p>配置化设计：将应用的配置信息（如接口地址、参数、样式等）独立出来，以便于动态修改和扩展。例如，一个电商应用可以将接口地址、商品分类、颜色等信息独立出来，以便于动态修改和扩展。</p>\\n</li>\\n<li>\\n<p>插件化设计：允许第三方开发者编写插件来扩展应用的功能。插件应该具有良好的接口设计和文档说明，以便于其他开发者使用和扩展。例如，一个电商应用可以允许第三方开发者编写商品推荐、评价等插件。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
