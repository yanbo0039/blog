import{_ as s,X as a,Y as t,a1 as n,a0 as e}from"./framework-68dd73a2.js";const l={},i=e(`<h1 id="java-jdk8-11主要新特性及其简单示例" tabindex="-1"><a class="header-anchor" href="#java-jdk8-11主要新特性及其简单示例" aria-hidden="true">#</a> Java-JDK8~11主要新特性及其简单示例</h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p></div><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li><p>以下是一些较新的 JDK 版本中引入的主要特性：</p></li><li><p>JDK 8：</p></li></ul><ul><li>Lambda 表达式和函数式接口：引入函数式编程的概念，简化代码书写。</li><li>Stream API：提供了一种流式操作集合的方式，支持函数式编程和并行处理。</li><li>默认方法（Default Methods）：接口中可以定义默认的方法实现。</li><li>方法引用（Method References）：简化方法调用的语法。</li><li>重复注解（Repeatable Annotations）：允许在同一地方使用多个相同类型的注解。</li><li>Optional 类：提供了一种处理可能为空值的情况的方式。</li></ul><ul><li>JDK 9：</li></ul><ul><li>模块化系统（Module System）：引入了模块化的概念，使得应用程序更易于开发、维护和部署。</li><li>私有接口方法（Private Interface Methods）：接口中可以定义私有的方法。</li><li>集合工厂方法（Collection Factory Methods）：方便地创建不可变集合对象。</li><li>改进的 Stream API：增加了一些新的方法和操作。</li><li>JShell（交互式编程工具）：可以在命令行中实时执行和测试代码片段。</li></ul><ul><li>JDK 10：</li></ul><ul><li>局部变量类型推断（Local Variable Type Inference）：支持使用 var 关键字进行局部变量的类型推断。</li><li>应用类数据共享（Application Class-Data Sharing）：在启动时将类元数据保存在共享归档文件中，加速应用程序的启动时间。</li><li>并行全垃圾回收器（Parallel Full GC）：引入了一种并行执行的全垃圾回收器。</li><li>线程局部握手（Thread-Local Handshakes）：改进线程停顿和并行执行效率。</li></ul><ul><li>JDK 11：</li></ul><ul><li>HTTP 客户端（HTTP Client）：引入了一套新的标准的 HTTP 客户端 API。</li><li>单文件执行程序（Single-File Execution）：支持直接运行单个源代码文件。</li><li>改进的垃圾回收器（Improved Garbage Collector）：引入了 Epsilon 垃圾回收器和 ZGC 垃圾回收器。</li><li>启动类数据共享（Startup Class-Data Sharing）：进一步优化了类加载和应用程序启动时间。</li></ul><blockquote><p>以上列举的仅是一部分 JDK 的新特性，每个版本还有其他的改进和增强。 请注意，具体的特性和语法细节可能会随着 JDK 版本的更新而有所变化， 请参考相应的 JDK 文档和官方发布信息以获取更准确的信息。</p></blockquote><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><ul><li><p>以下是一些 JDK 新特性的示例代码：</p></li><li><p>JDK 8 新特性示例：</p></li></ul><ol><li>Lambda 表达式和函数式接口：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;String&gt; names = Arrays.asList(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;);
names.forEach(name -&gt; System.out.println(name));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Stream API：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5);
int sum = numbers.stream().filter(n -&gt; n % 2 == 0).mapToInt(n -&gt; n).sum();
System.out.println(sum);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>默认方法：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>interface Greeting {
    default void sayHello() {
        System.out.println(&quot;Hello, world!&quot;);
    }
}

class EnglishGreeting implements Greeting {
}

EnglishGreeting greeting = new EnglishGreeting();
greeting.sayHello();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JDK 9 新特性示例：</li></ul><ol><li>模块化系统：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module com.example.myapp {
    requires java.base;
    requires java.sql;
    requires org.apache.commons.lang3;
    exports com.example.myapp;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>私有接口方法：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>interface Calculation {
    default int add(int a, int b) {
        return a + b;
    }
    
    private int subtract(int a, int b) {
        return a - b;
    }
    
    int perform(int a, int b);
}

class Calculator implements Calculation {
    public int perform(int a, int b) {
        return subtract(a, b);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JDK 10 新特性示例：</li></ul><ol><li>局部变量类型推断：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var message = &quot;Hello, world!&quot;;
System.out.println(message);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>应用类数据共享：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -Xshare:dump
java -Xshare:on -jar myapp.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JDK 11 的一些新特性示例说明：</li></ul><ol><li>HTTP 客户端（HTTP Client）： JDK 11 引入了一套全新的 HTTP 客户端 API，使得在 Java 程序中进行 HTTP 请求更加简单和灵活。示例代码如下：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URI</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>局部变量语法增强： 在 JDK 11 中，可以在 Lambda 表达式和匿名内部类中使用 <code>var</code> 关键字来声明局部变量，让代码更加简洁。示例代码如下：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>增强的字符串 API： JDK 11 引入了一些新的方法和操作符来方便处理字符串，比如 <code>String.isBlank()</code> 方法用于判断字符串是否为空或只包含空白字符，<code>String.strip()</code> 方法用于去除字符串首尾的空白字符，<code>String.repeat(int count)</code> 方法用于重复拼接字符串。示例代码如下：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;  Hello, world!  &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>长期支持（LTS）版本： JDK 11 是一个长期支持版本，提供长期稳定性和安全性支持，适合在生产环境中使用。</li></ol><blockquote><p>这些示例代码只是简单展示了各个 JDK 版本中的部分新特性， 实际应用中还可以根据具体需求结合其他特性进行更复杂的开发。</p></blockquote><hr><h3 id="分割线" tabindex="-1"><a class="header-anchor" href="#分割线" aria-hidden="true">#</a> 分割线</h3><hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>以上就是我关于 <em>JDK8~11主要新特性及其简单示例</em> 知识点的整理与总结的全部内容，希望对你有帮助。。。。。。。</strong></p></div>`,43);function p(c,o){return a(),t("div",null,[n(" more "),n(" sticky "),i])}const r=s(l,[["render",p],["__file","java277.html.vue"]]);export{r as default};
