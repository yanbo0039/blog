import{_ as l,X as i,Y as a,a0 as o}from"./framework-68dd73a2.js";const e={},t=o('<h1 id="面试总结" tabindex="-1"><a class="header-anchor" href="#面试总结" aria-hidden="true">#</a> 面试总结</h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p></div><h3 id="集联软件" tabindex="-1"><a class="header-anchor" href="#集联软件" aria-hidden="true">#</a> 集联软件</h3><ul><li>地址：北京石景山区北京京能信息技术有限公司</li></ul><h4 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h4><ul><li>面试人：于女士 微信电话面试</li><li>面试时间: 202310241500</li><li>持续时间：五分钟左右</li><li>问题：</li></ul><ol><li>上家公司离职原因?</li><li>jre/jvm</li><li>设计模式</li></ol><h4 id="二面" tabindex="-1"><a class="header-anchor" href="#二面" aria-hidden="true">#</a> 二面</h4><ul><li>面试人：杜青松 腾讯会议视频面试</li><li>面试时间: 202310251723</li><li>持续时间： 12分钟</li><li>问题</li></ul><ol><li>自我介绍为切入点</li><li>解释了Java的特性</li><li>说说封装继承多态</li><li>说说23种设计模式</li></ol><h3 id="广联达" tabindex="-1"><a class="header-anchor" href="#广联达" aria-hidden="true">#</a> 广联达</h3><ul><li>地址：北京华胜天成科研大楼 北京市海淀区东北旺西路中关村软件园二期</li><li>是一家建筑公司</li></ul><h4 id="一面-1" tabindex="-1"><a class="header-anchor" href="#一面-1" aria-hidden="true">#</a> 一面</h4><ul><li>面试人：刘宏锁 微信电话面试</li><li>面试时间: 202310271600</li><li>持续时间: 五分27秒</li><li>问题：</li></ul><ol><li>聊的有的没的 其目的是为了初步感受被面试人的表达能力与情绪感染力</li></ol><h4 id="二面-1" tabindex="-1"><a class="header-anchor" href="#二面-1" aria-hidden="true">#</a> 二面</h4><ul><li>面试人： 忘记姓名的小姐姐 13811348795 开始以电话联系我发现打不通 由于我事先申明过优先微信电话联系 用的是 刘 的微信电话联系到我的</li><li>面试时间: 202310271730</li><li>持续时间：11分整</li><li>问题：</li></ul><ol><li>上家公司离职原因</li><li>上一个项目</li><li>做过醉大访问量的项目是多大的</li><li>薪资要求</li></ol><h3 id="快手外包-外包092801-web前后端全栈工程师" tabindex="-1"><a class="header-anchor" href="#快手外包-外包092801-web前后端全栈工程师" aria-hidden="true">#</a> 快手外包 （外包092801）web前后端全栈工程师</h3><h4 id="一面-2" tabindex="-1"><a class="header-anchor" href="#一面-2" aria-hidden="true">#</a> 一面</h4><ul><li>面试人：松</li><li>面试时间：2023-10-31 15:00 (UTC +08:00)</li><li>持续时间：一小时左右</li><li>问题：</li></ul><ul><li><ol><li>自我介绍</li></ol></li><li><ol start="2"><li>上一个项目</li></ol></li><li><ol start="3"><li>说说你对于HashMap的理解</li></ol></li></ul><blockquote><p>HashMap是Java中的一个哈希表实现，它通过键值对的方式存储和访问数据。 它的底层实现是一个数组和链表或红黑树的结合体，可以高效地进行数据存储和查找。</p></blockquote><p>在HashMap中，每个键值对都是一个Entry对象，其中包含了键和值的引用。 当添加一个键值对时，首先会根据键的哈希值计算出在数组中的索引位置，如果该位置上没有元素， 则直接将键值对存储在该位置上；如果该位置上已经有元素， 则使用链表或红黑树来解决冲突，将新的键值对添加到链表或红黑树中。</p><p>在使用HashMap时，需要注意以下几点：</p><ol><li>HashMap中的键必须是唯一的，如果添加了相同的键，则后面的值会覆盖前面的值。</li><li>HashMap中的键和值可以为null，但需要注意空指针异常。</li><li>HashMap不是线程安全的，如果需要在多线程环境下使用，需要进行同步处理。</li><li>HashMap的初始容量和负载因子可以通过构造函数进行设置，如果不指定，则使用默认值。</li><li>HashMap的遍历顺序不是按照添加顺序或者键的顺序，而是按照哈希值的顺序进行遍历。</li></ol><p>总之，HashMap是Java中常用的数据结构之一，它提供了高效的数据存储和查找能力，可以满足大部分场景下的需求。</p><ul><li><ol start="4"><li>说说你对于多线程的理解</li></ol></li></ul><blockquote><p>Java多线程是指在Java程序中同时执行多个线程的编程模型。J ava提供了丰富的多线程支持，使得开发者可以方便地创建和管理多个线程， 并实现并发执行的程序。</p></blockquote><p>在Java中，可以通过以下方式创建和管理线程：</p><ol><li>继承Thread类：创建一个继承自Thread类的子类，并重写run()方法来定义线程的执行逻辑。</li><li>实现Runnable接口：创建一个实现了Runnable接口的类，并将其作为参数传递给Thread类的构造方法。</li><li>使用线程池：通过Executor框架中的线程池来管理线程的创建和执行。</li></ol><p>在多线程编程中，需要注意以下几点：</p><ol><li>线程同步：当多个线程同时访问共享资源时，可能会出现数据竞争和不一致性。可以使用synchronized关键字或Lock接口来实现线程同步，保证共享资源的安全访问。</li><li>线程通信：多个线程之间可能需要进行协作和通信。可以使用wait()、notify()和notifyAll()等方法来实现线程之间的等待和唤醒机制。</li><li>线程安全集合：Java提供了一些线程安全的集合类，如ConcurrentHashMap、ConcurrentLinkedQueue等，可以在多线程环境中安全地操作集合。</li><li>并发工具类：Java提供了一些并发工具类，如CountDownLatch、CyclicBarrier、Semaphore等，可以帮助控制多个线程的执行顺序和并发度。</li></ol><p>总之，Java多线程编程是一种强大的工具，可以实现并发执行和提高程序性能。但同时也需要谨慎处理线程同步、 线程通信和共享资源等问题，以确保多线程程序的正确性和稳定性。</p><ul><li><ol start="5"><li>说说你对于MySQL数据库存储引擎InnoDB的理解</li></ol></li></ul><blockquote><p>InnoDB是MySQL数据库的一种存储引擎，它具有以下特点：</p></blockquote><ol><li>支持事务：InnoDB支持ACID事务，可以保证数据的一致性和可靠性。</li><li>行级锁定：InnoDB支持行级锁定，可以提高并发性能和数据访问速度。</li><li>外键约束：InnoDB支持外键约束，可以保证数据的完整性和一致性。</li><li>支持MVCC：InnoDB使用多版本并发控制（MVCC）来实现事务的隔离级别，可以解决读写冲突和锁竞争的问题。</li><li>支持热备份：InnoDB支持在线热备份，可以在不停机的情况下备份数据库。</li></ol><blockquote><p>在使用InnoDB时，需要注意以下几点：</p></blockquote><ol><li>InnoDB的默认存储引擎是MyISAM，需要手动设置为InnoDB。</li><li>InnoDB的事务支持会带来一定的性能开销，因此需要根据具体情况进行权衡和优化。</li><li>InnoDB使用行级锁定来实现并发控制，但同时也会带来一定的开销，需要注意锁竞争和死锁的问题。</li><li>InnoDB的MVCC机制会占用一定的存储空间，需要注意存储空间的使用和管理。</li><li>InnoDB的热备份需要使用特定的工具和方式来实现，需要进行备份和恢复测试。</li></ol><p>总之，InnoDB是MySQL中常用的存储引擎之一， 具有事务支持、行级锁定、外键约束、MVCC、热备份等特点。 在使用InnoDB时，需要注意性能开销、锁竞争、MVCC机制、存储空间和备份恢复等问题。</p><ul><li><ol start="6"><li>说说你对于Mysql索引分类的理解</li></ol></li></ul><blockquote><p>MySQL索引是一种用于提高数据库查询性能的数据结构。 根据不同的使用场景和实现方式，MySQL索引可以分为以下几类：</p></blockquote><ol><li><p>B-Tree索引：B-Tree索引是MySQL中最常用的一种索引类型，它是一种平衡树结构，可以快速定位具有某个特定值的行。B-Tree索引可以支持等值查询、范围查询和排序操作。</p></li><li><p>哈希索引：哈希索引是将数据存储在哈希表中的一种索引类型，可以实现O(1)的查询性能。但是，哈希索引只支持等值查询，不支持范围查询和排序操作。</p></li><li><p>全文索引：全文索引是一种用于全文搜索的索引类型，可以对文本内容进行分词和匹配，支持关键字查询和模糊查询。</p></li><li><p>空间索引：空间索引是一种用于地理位置搜索的索引类型，可以对地理位置坐标进行索引和查询。</p></li><li><p>其他类型索引：MySQL还支持其他类型的索引，如前缀索引、组合索引、唯一索引等。这些索引类型可以根据具体的业务需求来选择使用。</p></li></ol><blockquote><p>在使用MySQL索引时，需要注意以下几点：</p></blockquote><ol><li>索引的选择：需要根据具体的业务需求和数据特点来选择合适的索引类型和字段。</li><li>索引的优化：需要对索引进行优化和调整，以提高查询性能和减少存储空间。</li><li>索引的维护：需要定期对索引进行维护和优化，以保证其性能和稳定性。</li><li>索引的限制：需要注意MySQL对于索引的限制，如最大长度、最大数量等。</li></ol><blockquote><p>总之，MySQL索引是提高数据库查询性能的重要手段，可以根据不同的使用场景和实现方式进行分类。 在使用MySQL索引时，需要注意选择、优化、维护和限制等问题。</p></blockquote><ul><li><ol start="7"><li>笔试题</li></ol></li></ul><h3 id="霍尔果斯柯莱特信息科技有限公司" tabindex="-1"><a class="header-anchor" href="#霍尔果斯柯莱特信息科技有限公司" aria-hidden="true">#</a> 霍尔果斯柯莱特信息科技有限公司</h3><h4 id="事前准备" tabindex="-1"><a class="header-anchor" href="#事前准备" aria-hidden="true">#</a> 事前准备</h4><ul><li>可能要问的问题</li><li><ol><li>说一说什么是面向对象</li></ol></li></ul><blockquote><p>面向对象是一种编程范式，它是基于对象概念的软件设计方法。 在面向对象编程中，将程序看作是一组相互作用的对象集合， 每个对象都具有自己的属性和方法，并且可以与其他对象进行交互和通信。</p></blockquote><p>面向对象编程具有以下特点：</p><ol><li>封装性：将数据和方法封装在对象内部，以保护数据的安全性和完整性。</li><li>继承性：通过继承机制，可以从已有的类中派生出新的类，并且可以重用已有类的属性和方法。</li><li>多态性：同一个方法可以在不同的对象上具有不同的实现方式，从而实现多态性。</li><li>抽象性：通过抽象类和接口，可以定义一组共同的属性和方法，并且可以通过继承和实现来实现具体的功能。</li></ol><p>在面向对象编程中，需要注意以下几点：</p><ol><li>类的设计：需要根据具体的业务需求和数据特点来设计合适的类和对象。</li><li>继承和多态：需要合理地使用继承和多态机制，以提高代码的可重用性和可维护性。</li><li>封装和抽象：需要合理地使用封装和抽象机制，以保证数据的安全性和代码的灵活性。</li><li>设计模式：需要学习和应用常用的设计模式，以提高代码的质量和可重用性。</li></ol><blockquote><p>总之，面向对象编程是一种重要的编程范式， 具有封装性、继承性、多态性和抽象性等特点。 在进行面向对象编程时，需要根据具体的业务需求和数据特点来设计合适的类和对象， 并合理地使用继承、多态、封装和抽象机制。</p></blockquote><ul><li><ol start="2"><li>说一说常见的设计模式 常见的设计模式有以下几种：</li></ol></li></ul><ol><li><p>工厂模式：工厂模式是一种创建型模式，它提供了一种创建对象的方式，而无需暴露对象的创建逻辑。工厂模式分为简单工厂、工厂方法和抽象工厂等几种形式。</p></li><li><p>单例模式：单例模式是一种创建型模式，它保证一个类只有一个实例，并且提供了全局访问点。单例模式可以使用饿汉式、懒汉式、双重检查锁等多种实现方式。</p></li><li><p>适配器模式：适配器模式是一种结构型模式，它可以将不兼容的接口转换为兼容的接口。适配器模式分为类适配器、对象适配器和接口适配器等几种形式。</p></li><li><p>装饰器模式：装饰器模式是一种结构型模式，它可以动态地为对象添加额外的功能。装饰器模式通过组合来实现功能的扩展，可以实现无限级别的功能扩展。</p></li><li><p>观察者模式：观察者模式是一种行为型模式，它定义了一种一对多的依赖关系，使得多个观察者对象可以同时监听某一个主题对象。当主题对象发生变化时，会通知所有的观察者对象进行更新。</p></li><li><p>策略模式：策略模式是一种行为型模式，它定义了一系列算法，并将每个算法封装起来，使得它们可以相互替换。策略模式可以提高代码的灵活性和可维护性。</p></li><li><p>模板方法模式：模板方法模式是一种行为型模式，它定义了一个算法的骨架，并允许子类为其中的某些步骤提供具体实现。模板方法模式可以提高代码复用性和可扩展性。</p></li></ol><p>总之，设计模式是一种常用的编程思想和经验总结，可以提高代码的重用性、可维护性和可扩展性。在使用设计模式时，需要根据具体的业务需求和代码特点来选择合适的设计模式，并进行适当地调整和优化。</p><ul><li><ol start="3"><li>说一说你对Jvm的理解</li></ol></li></ul><blockquote><p>JVM（Java虚拟机）是Java平台的核心组成部分，它是一种用于执行Java字节码的虚拟机。JVM具有以下几个主要的功能和特点：</p></blockquote><ol><li><p>跨平台性：JVM的设计目标之一是实现跨平台性。Java源代码通过编译器编译成字节码，然后在不同的操作系统上的JVM上执行，实现了一次编写，到处运行的特性。</p></li><li><p>内存管理：JVM负责Java程序的内存管理。它提供了自动的垃圾回收机制，通过对不再使用的对象进行回收，释放内存空间。此外，JVM还负责内存分配和对象的生命周期管理。</p></li><li><p>类加载：JVM通过类加载器（ClassLoader）来加载Java类。类加载器负责将编译后的字节码文件加载到内存中，并进行链接和初始化操作，使得Java类可以被正确地执行。</p></li><li><p>执行引擎：JVM的执行引擎负责解释和执行Java字节码。执行引擎可以根据需要选择解释执行或者即时编译执行（通过即时编译器将热点代码编译成本地机器码执行），以提高程序的执行效率。</p></li><li><p>安全性：JVM提供了安全管理器（Security Manager）来控制Java程序的访问权限。安全管理器可以对Java程序进行安全检查，防止恶意代码对系统造成损害。</p></li></ol><blockquote><p>总之，JVM是Java平台的核心组件，它实现了跨平台性、内存管理、类加载、 执行引擎和安全性等功能。通过JVM，Java程序可以在不同的操作系统上运行， 并且具有良好的性能和安全性。</p></blockquote><ul><li><ol start="4"><li>什么是系统应用框架</li></ol></li></ul><blockquote><p>系统应用框架是一种为开发系统级应用程序提供基础功能和结构的软件框架。它提供了一系列的库、工具和API， 用于简化系统级应用程序的开发过程，并提供了通用的功能模块和架构设计，以便开发人员可以专注于业务逻辑的实现。</p></blockquote><ul><li>系统应用框架通常包括以下方面的功能：</li></ul><ol><li><p>硬件抽象层（HAL）：提供对底层硬件设备的抽象和访问接口，使开发人员可以编写与硬件无关的代码。</p></li><li><p>系统服务：提供系统级别的服务，如网络管理、电源管理、通知管理等，以便应用程序可以调用这些服务来满足特定的需求。</p></li><li><p>用户界面框架：提供用户界面开发的工具和库，包括布局管理、UI控件、主题样式等，以便开发人员可以快速构建用户友好的界面。</p></li><li><p>数据存储和访问：提供数据存储和访问的API，包括数据库访问、文件系统访问等，以便应用程序可以持久化数据或者与外部数据源进行交互。</p></li><li><p>安全和权限管理：提供安全和权限管理的功能，包括用户身份验证、权限控制、数据加密等，以保护系统和用户数据的安全性。</p></li></ol><blockquote><p>通过使用系统应用框架，开发人员可以避免重复编写基础功能的代码，提高开发效率， 并且能够利用框架提供的最佳实践和设计模式来构建可维护和可扩展的系统级应用程序。</p></blockquote><ul><li><ol start="5"><li>说一说你对于MQ缓存的理解</li></ol></li></ul><p>MQ缓存是指在消息队列（MQ）系统中使用缓存技术来提高消息的传输效率和系统的可靠性。</p><p>MQ缓存的主要目的是减少对底层MQ系统的频繁访问，通过将消息暂存在缓存中，减轻MQ系统的负载压力。同时，MQ缓存还可以提供更快的消息传输速度，因为从缓存中读取消息比从MQ系统中读取消息更快。</p><p>MQ缓存通常具有以下特点：</p><ol><li><p>高性能：通过将消息缓存在内存中，可以实现更快的读写速度和响应时间。</p></li><li><p>可靠性：通过缓存机制，即使MQ系统出现故障或不可用，消息也可以在缓存中暂存，避免数据丢失。</p></li><li><p>异步处理：MQ缓存可以支持异步处理模式，将消息放入缓存后立即返回，然后由后台任务异步地将消息发送到MQ系统。</p></li><li><p>消息过滤和路由：MQ缓存可以根据特定的规则对消息进行过滤和路由，只将符合条件的消息发送到MQ系统。</p></li><li><p>扩展性：通过增加缓存节点，可以提高系统的并发处理能力和可扩展性。</p></li></ol><blockquote><p>总之，MQ缓存是一种在消息队列系统中使用缓存技术来提高效率和可靠性的解决方案。 它可以减轻MQ系统的负载压力，提供更快的消息传输速度，并保证消息的可靠性和持久性。</p></blockquote><h4 id="一面-3" tabindex="-1"><a class="header-anchor" href="#一面-3" aria-hidden="true">#</a> 一面</h4><ul><li>面试人：刘玉容</li><li>面试时间：19:00</li><li>持续时间：19:00 ~ 19:26</li><li>问题：</li><li><ol><li>Java锁的理解</li></ol></li><li><ol start="2"><li>list的迭代方式</li></ol></li><li><ol start="3"><li>fail—fast的理解</li></ol></li><li><ol start="4"><li>AOP应用场景</li></ol></li><li><ol start="5"><li>AOP应用场景</li></ol></li><li><ol start="6"><li>== 和 全等的区别</li></ol></li><li><ol start="7"><li>cookie 和 session 的区别</li></ol></li><li><ol start="8"><li>抽象类和接口的区别</li></ol></li></ul><hr><h3 id="分割线" tabindex="-1"><a class="header-anchor" href="#分割线" aria-hidden="true">#</a> 分割线</h3><hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>以上就是我关于 <em>面试总结</em> 知识点的整理与总结的全部内容，希望对你有帮助。。。。。。。</strong></p></div>',80),p=[t];function r(n,h){return i(),a("div",null,p)}const c=l(e,[["render",r],["__file","13-面试总结.html.vue"]]);export{c as default};
