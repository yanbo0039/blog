const t=JSON.parse('{"key":"v-3d4c2216","path":"/zh/programBlog/ServerSideLanguage/Java/139-Java-%E4%BD%BF%E7%94%A8%E5%AD%97%E8%8A%82%E6%B5%81%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E6%8B%B7%E8%B4%9D.html","title":"Java-使用字节流进行文件的拷贝","lang":"zh-CN","frontmatter":{"title":"Java-使用字节流进行文件的拷贝","icon":"page","order":139,"author":"涎涎","date":"2019-07-16T00:00:00.000Z","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java-使用字节流进行文件的拷贝"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/139-Java-%E4%BD%BF%E7%94%A8%E5%AD%97%E8%8A%82%E6%B5%81%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java-使用字节流进行文件的拷贝"}],["meta",{"property":"og:description","content":"139-Java-使用字节流进行文件的拷贝.md 代码如下： package 图片的拷贝; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class TestImageCopy { \\tpublic static void main(String[] args) { \\t\\t/** \\t\\t * 文件拷贝的套路： \\t\\t * 1. 要有两个文件对象：源文件 目标文件 \\t\\t * 2. 要有两个流 ， 一个负责读，一个负责写 \\t\\t * 3.循环读写 \\t\\t * 4.流都要关闭 \\t\\t */ //\\t\\t1. 要有两个文件对象：源文件 目标文件 \\t\\tFile source = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\138-Images\\\\\\\\Java_139_1.png\\"); //\\t\\tFile source = new File(\\"E:\\\\\\\\Java_139_2.png\\"); \\t\\t \\t\\tFile dest = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\Java_139_3.png\\"); //\\t\\tFile dest = new File(\\"D:\\\\\\\\Java_139_4.png\\"); \\t\\t //\\t\\t2. 要有两个流 ， 一个负责读，一个负责写 \\t\\t \\t\\tFileInputStream fis = null; \\t\\tFileOutputStream fos = null; \\t\\t \\t\\ttry { \\t\\t\\tfis = new FileInputStream(source); \\t\\t\\tfos = new FileOutputStream(dest); \\t\\t\\t \\t\\t\\tbyte[] b = new byte[3];//存放读的数据 \\t\\t\\tint numbers = -1;//使用该变量作为循环的条件 \\t\\t\\t//这里是读，读到b数组中，b数组是我们在内存中开辟缓冲区 \\t\\t\\twhile((numbers = fis.read(b)) != -1) { \\t\\t\\t\\tfos.write(b,0,numbers);//读多少写多少 \\t\\t\\t} \\t\\t\\t \\t\\t\\t \\t\\t} catch (Exception e) { \\t\\t\\te.printStackTrace(); \\t\\t}finally {//4.流都要关闭 \\t\\t\\ttry { \\t\\t\\t\\tfis.close(); \\t\\t\\t\\tfos.close(); \\t\\t\\t} catch (IOException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T10:10:00.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2019-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T10:10:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java-使用字节流进行文件的拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-15T10:10:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"139-Java-使用字节流进行文件的拷贝.md 代码如下： package 图片的拷贝; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class TestImageCopy { \\tpublic static void main(String[] args) { \\t\\t/** \\t\\t * 文件拷贝的套路： \\t\\t * 1. 要有两个文件对象：源文件 目标文件 \\t\\t * 2. 要有两个流 ， 一个负责读，一个负责写 \\t\\t * 3.循环读写 \\t\\t * 4.流都要关闭 \\t\\t */ //\\t\\t1. 要有两个文件对象：源文件 目标文件 \\t\\tFile source = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\138-Images\\\\\\\\Java_139_1.png\\"); //\\t\\tFile source = new File(\\"E:\\\\\\\\Java_139_2.png\\"); \\t\\t \\t\\tFile dest = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\Java_139_3.png\\"); //\\t\\tFile dest = new File(\\"D:\\\\\\\\Java_139_4.png\\"); \\t\\t //\\t\\t2. 要有两个流 ， 一个负责读，一个负责写 \\t\\t \\t\\tFileInputStream fis = null; \\t\\tFileOutputStream fos = null; \\t\\t \\t\\ttry { \\t\\t\\tfis = new FileInputStream(source); \\t\\t\\tfos = new FileOutputStream(dest); \\t\\t\\t \\t\\t\\tbyte[] b = new byte[3];//存放读的数据 \\t\\t\\tint numbers = -1;//使用该变量作为循环的条件 \\t\\t\\t//这里是读，读到b数组中，b数组是我们在内存中开辟缓冲区 \\t\\t\\twhile((numbers = fis.read(b)) != -1) { \\t\\t\\t\\tfos.write(b,0,numbers);//读多少写多少 \\t\\t\\t} \\t\\t\\t \\t\\t\\t \\t\\t} catch (Exception e) { \\t\\t\\te.printStackTrace(); \\t\\t}finally {//4.流都要关闭 \\t\\t\\ttry { \\t\\t\\t\\tfis.close(); \\t\\t\\t\\tfos.close(); \\t\\t\\t} catch (IOException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} }"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1684145400000,"updatedTime":1684145400000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":1.58,"words":475},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/139-Java-使用字节流进行文件的拷贝.md","localizedDate":"2019年7月16日","excerpt":"<!-- more -->\\n<h1> <a href=\\"http://xn--139-Java--e87n80ctz2fczumgiy93a071af3e026dt8wylvbfn.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">139-Java-使用字节流进行文件的拷贝.md</a></h1>\\n<p>代码如下：</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>package 图片的拷贝;\\n\\nimport java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.FileOutputStream;\\nimport java.io.IOException;\\n\\npublic class TestImageCopy {\\n\\n\\tpublic static void main(String[] args) {\\n\\n\\t\\t/**\\n\\t\\t * 文件拷贝的套路：\\n\\t\\t * 1. 要有两个文件对象：源文件 目标文件\\n\\t\\t * 2. 要有两个流 ， 一个负责读，一个负责写\\n\\t\\t * 3.循环读写\\n\\t\\t * 4.流都要关闭\\n\\t\\t */\\n//\\t\\t1. 要有两个文件对象：源文件 目标文件\\n\\t\\tFile source = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\138-Images\\\\\\\\Java_139_1.png\\");\\n//\\t\\tFile source = new File(\\"E:\\\\\\\\Java_139_2.png\\");\\n\\t\\t\\n\\t\\tFile dest = new File(\\"E:\\\\\\\\简书\\\\\\\\Java\\\\\\\\Java_139_3.png\\");\\n//\\t\\tFile dest = new File(\\"D:\\\\\\\\Java_139_4.png\\");\\n\\t\\t\\n//\\t\\t2. 要有两个流 ， 一个负责读，一个负责写\\n\\t\\t\\n\\t\\tFileInputStream fis = null;\\n\\t\\tFileOutputStream fos = null;\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tfis = new FileInputStream(source);\\n\\t\\t\\tfos = new FileOutputStream(dest);\\n\\t\\t\\t\\n\\t\\t\\tbyte[] b = new byte[3];//存放读的数据\\n\\t\\t\\tint numbers = -1;//使用该变量作为循环的条件\\n\\t\\t\\t//这里是读，读到b数组中，b数组是我们在内存中开辟缓冲区\\n\\t\\t\\twhile((numbers = fis.read(b)) != -1) {\\n\\t\\t\\t\\tfos.write(b,0,numbers);//读多少写多少\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}finally {//4.流都要关闭\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tfis.close();\\n\\t\\t\\t\\tfos.close();\\n\\t\\t\\t} catch (IOException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
