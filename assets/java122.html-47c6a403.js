import{_ as n,X as d,Y as l,a1 as a,Z as t,$ as e,a2 as r,a0 as u,F as s}from"./framework-68dd73a2.js";const c={},g={id:"_122-java-stringbuffer和stringbuilder的区别-md",tabindex:"-1"},o=t("a",{class:"header-anchor",href:"#_122-java-stringbuffer和stringbuilder的区别-md","aria-hidden":"true"},"#",-1),v={href:"http://xn--122-Java-StringBufferStringBuilder-8m11dzxr6um0q93a.md",target:"_blank",rel:"noopener noreferrer"},S=u(`<ul><li>StringBuffer类 <ul><li>StringBuffer类用于内容可以改变的字符串</li><li>可以使用StringBuffer来对字符串的内容进行动态操作，不会产生额外的对象</li></ul></li><li>StringBuffer对象的创建 <ul><li>构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuffer 变量名 = new StringBuffer () ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>构造一个不带字符，但具有指定初始容量的字符串缓冲区。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuffer 变量名 = new StringBuffer (int capacity ) ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuffer 变量名 = new StringBuffer (String value) ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>StringBuffer类中常用的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>int capacity( )</td><td>返回当前容量</td></tr><tr><td>int length( )</td><td>返回长度（字符数）</td></tr><tr><td>StringBuffer reverse( )</td><td>将此字符序列用其反转形式取代</td></tr><tr><td>void setCharAt(int,char)</td><td>将给定索引处的字符设置为 ch</td></tr><tr><td>StringBuffer delete(int begin,int end)</td><td>移除此序列的子字符串中的字符</td></tr><tr><td>char charAt(int)</td><td>返回此序列中指定索引处的 char 值</td></tr><tr><td>String toString( )</td><td>将StringBuffer对象转换成相应的String</td></tr><tr><td>StringBuffer append(String str)</td><td>将指定的字符串追加到此字符序列</td></tr><tr><td>StringBuffer append(int num)</td><td>将 int 参数的字符串表示形式追加到此序列</td></tr><tr><td>StringBuffer append(Object o)</td><td>追加 Object 参数的字符串表示形式</td></tr><tr><td>StringBuffer insert(int index,String str)</td><td>将字符串插入此字符序列中</td></tr><tr><td>StringBuffer insert(int index,char ch)</td><td>将字符插入此字符序列中</td></tr><tr><td>StringBuffer insert(int index,Object o)</td><td>将 Object 参数的字符串表示形式插入此字符序列中</td></tr></tbody></table><ol><li>想要判断两个StringBuffer变量的内容是否相等，应先用toString（）将他们转换成String对象。</li><li>StrigBuffer节省内存开销</li></ol><ul><li>StringBuilder类 <ul><li>StringBuilder类是一个可变的字符序列。</li><li>JDK自从5.0版本后引入。</li><li>StringBuilder类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候 。</li></ul></li><li>StringBuilder对象的创建 <ul><li>构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuilder 变量名 = new StringBuilder () ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>构造一个不带任何字符的字符串生成器，其初始容量由 capacity 参数指定。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuilder 变量名 = new StringBuilder (int capacity ) ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>构造一个字符串生成器，并初始化为指定的字符串内容</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>StringBuilder 变量名 = new StringBuilder(String str) ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>StringBuilder类中常用的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>int capacity( )</td><td>返回当前容量</td></tr><tr><td>int length( )</td><td>返回长度（字符数）</td></tr><tr><td>StringBuilder reverse( )</td><td>将此字符序列用其反转形式取代</td></tr><tr><td>void setCharAt(int index,char ch)</td><td>将给定索引index处的字符设置为 ch</td></tr><tr><td>StringBuilder delete(int begin,int end)</td><td>移除此序列的子字符串中的字符</td></tr><tr><td>char charAt(int index)</td><td>返回此序列中指定索引处的 char 值</td></tr><tr><td>String toString( )</td><td>将StringBuilder对象转换成相应的String</td></tr><tr><td>StringBuilder append(String str)</td><td>将指定的字符串追加到此字符序列</td></tr><tr><td>StringBuilder append(int num)</td><td>将 int 参数的字符串表示形式追加到此序列</td></tr><tr><td>StringBuilder append(Object o)</td><td>追加 Object 参数的字符串表示形式</td></tr><tr><td>StringBuilder insert(int index,String str)</td><td>将字符串插入此字符序列中</td></tr><tr><td>StringBuilder insert(int index,char ch)</td><td>将字符插入此字符序列中</td></tr><tr><td>StringBuilder insert(int index,Object o)</td><td>将 Object 参数的字符串表示形式插入此字符序列中</td></tr></tbody></table><ul><li><p>String类与StringBuilder类的比较</p><ul><li>Java中定义了String与StringBuffer两个类来封装对字符串的各种操作</li><li>String类与StringBuffer类都被放到了java.lang包中</li><li>两者的主要区别在于 <ul><li>String类对象中的内容初始化不可以改变</li><li>StringBuffer类对象中的内容可以改变</li></ul></li></ul></li><li><p>StringBuffer类与StringBuilder类的比较</p><ul><li>StringBuffer和StringBuilder都是长度可变的字符串。</li><li>两者的操作基本相同。</li><li>两者的主要区别在于 <ul><li>StringBuffer类是线程安全的；</li><li>StringBuilder类是线程不安全的。</li><li>StringBuffer在JDK1.0中就有，而StringBuilder是在JDK5.0后才出现的。</li><li>StringBuilder的一些方法实现要比StringBuffer快些。</li></ul></li></ul></li></ul><p><strong>示例代码：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package 字符串类;

public class TestStringBuff_StringBuilder {

	public static void main(String[] args) {

		StringBuffer sb1 = new StringBuffer(&quot;888sjierijj&quot;);//堆区中创建了一个对象
		
		sb1.append(true);
		sb1.append(&quot;123&quot;.toCharArray());
		sb1.insert(8,&#39;p&#39;);//在索引是8的位置插入
		System.out.println(sb1.toString());
		sb1.replace(0,3,&quot;999&quot;);//结束索引不包括在内
		System.out.println(sb1.toString());//sjierijjtrue123
		sb1.reverse();
		System.out.println(&quot;delete 之前:&quot;+sb1);
		sb1.delete(0, 2);//结束索引不包括在内
		
		System.out.println(&quot;delete 之后:&quot;+sb1);//delete 之后:1eurtjjipreijs999
		
		System.out.println(sb1.charAt(5));
		StringBuilder sb2 = new StringBuilder(&quot;abc&quot;);
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),f=t("em",null,"Java-StringBuffer和StringBuilder的区别",-1),b={href:"https://github.com/javaobjects/demo516",target:"_blank",rel:"noopener noreferrer"},m=t("hr",null,null,-1),B=t("h3",{id:"分割线",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分割线","aria-hidden":"true"},"#"),e(" 分割线")],-1),h=t("hr",null,null,-1),p=t("p",null,[t("strong",null,"博主为咯学编程：父母不同意学编程，现已断绝关系;恋人不同意学编程，现已分手;亲戚不同意学编程，现已断绝来往;老板不同意学编程,现已失业三十年。。。。。。如果此博文有帮到你欢迎打赏，金额不限。。。")],-1);function x(_,j){const i=s("ExternalLinkIcon");return d(),l("div",null,[a(" more "),t("h1",g,[o,e(),t("a",v,[e("122-Java-StringBuffer和StringBuilder的区别.md"),r(i)])]),S,t("p",null,[t("strong",null,[e("以上就是我关于 "),f,e(" 知识点的整理与总结的全部内容，"),t("a",b,[e("另附源码"),r(i)])])]),m,B,h,p])}const q=n(c,[["render",x],["__file","java122.html.vue"]]);export{q as default};
