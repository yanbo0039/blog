const e=JSON.parse('{"key":"v-6506090b","path":"/zh/programBlog/ServerSideLanguage/Java/java276.html","title":"Java常用的数据结构及简单的示例","lang":"zh-CN","frontmatter":{"title":"Java常用的数据结构及简单的示例","icon":"page","sticky":20230619165924,"order":276,"author":"涎涎","date":"2023-06-19T16:59:24.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java276.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java常用的数据结构及简单的示例"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java276.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java常用的数据结构及简单的示例"}],["meta",{"property":"og:description","content":"Java常用的数据结构及简单的示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 概念 Java常用的数据结构包括： 数组（Array）：是一种线性数据结构，可以存储相同类型的一组元素。 链表（LinkedList）：是一种动态数据结构，由节点组成，每个节点包含数据和指向下一个节点的引用。 栈（Stack）：是一种后进先出（LIFO）的数据结构，只允许在栈顶进行插入和删除操作。 队列（Queue）：是一种先进先出（FIFO）的数据结构，允许在队尾插入元素，在队首删除元素。 堆（Heap）：是一种特殊的树形数据结构，用于实现优先级队列，具有父节点的键值总是大于或等于其子节点。 集合（Set）：是一种不允许重复元素的数据结构，常见的实现类有HashSet和TreeSet。 映射（Map）：是一种键值对的数据结构，每个键对应一个值，常见的实现类有HashMap和TreeMap。 树（Tree）：是一种非线性的数据结构，由节点和边组成，每个节点可以有多个子节点。 图（Graph）：是一种非线性的数据结构，由节点和边组成，节点之间可以有多个连接关系。 集合框架（Collections Framework）：Java提供了一套完整的集合框架，包括List、Set、Queue、Map等接口及其实现类，方便开发者使用和操作不同类型的数据结构。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-06-19T16:59:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java常用的数据结构及简单的示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-19T16:59:24.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java常用的数据结构及简单的示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 概念 Java常用的数据结构包括： 数组（Array）：是一种线性数据结构，可以存储相同类型的一组元素。 链表（LinkedList）：是一种动态数据结构，由节点组成，每个节点包含数据和指向下一个节点的引用。 栈（Stack）：是一种后进先出（LIFO）的数据结构，只允许在栈顶进行插入和删除操作。 队列（Queue）：是一种先进先出（FIFO）的数据结构，允许在队尾插入元素，在队首删除元素。 堆（Heap）：是一种特殊的树形数据结构，用于实现优先级队列，具有父节点的键值总是大于或等于其子节点。 集合（Set）：是一种不允许重复元素的数据结构，常见的实现类有HashSet和TreeSet。 映射（Map）：是一种键值对的数据结构，每个键对应一个值，常见的实现类有HashMap和TreeMap。 树（Tree）：是一种非线性的数据结构，由节点和边组成，每个节点可以有多个子节点。 图（Graph）：是一种非线性的数据结构，由节点和边组成，节点之间可以有多个连接关系。 集合框架（Collections Framework）：Java提供了一套完整的集合框架，包括List、Set、Queue、Map等接口及其实现类，方便开发者使用和操作不同类型的数据结构。"},"headers":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":5.11,"words":1534},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/276-Java常用的数据结构及简单的示例.md","localizedDate":"2023年6月19日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> Java常用的数据结构及简单的示例</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<h3> 概念</h3>\\n<ul>\\n<li>Java常用的数据结构包括：</li>\\n</ul>\\n<ol>\\n<li>\\n<p>数组（Array）：是一种线性数据结构，可以存储相同类型的一组元素。</p>\\n</li>\\n<li>\\n<p>链表（LinkedList）：是一种动态数据结构，由节点组成，每个节点包含数据和指向下一个节点的引用。</p>\\n</li>\\n<li>\\n<p>栈（Stack）：是一种后进先出（LIFO）的数据结构，只允许在栈顶进行插入和删除操作。</p>\\n</li>\\n<li>\\n<p>队列（Queue）：是一种先进先出（FIFO）的数据结构，允许在队尾插入元素，在队首删除元素。</p>\\n</li>\\n<li>\\n<p>堆（Heap）：是一种特殊的树形数据结构，用于实现优先级队列，具有父节点的键值总是大于或等于其子节点。</p>\\n</li>\\n<li>\\n<p>集合（Set）：是一种不允许重复元素的数据结构，常见的实现类有HashSet和TreeSet。</p>\\n</li>\\n<li>\\n<p>映射（Map）：是一种键值对的数据结构，每个键对应一个值，常见的实现类有HashMap和TreeMap。</p>\\n</li>\\n<li>\\n<p>树（Tree）：是一种非线性的数据结构，由节点和边组成，每个节点可以有多个子节点。</p>\\n</li>\\n<li>\\n<p>图（Graph）：是一种非线性的数据结构，由节点和边组成，节点之间可以有多个连接关系。</p>\\n</li>\\n<li>\\n<p>集合框架（Collections Framework）：Java提供了一套完整的集合框架，包括List、Set、Queue、Map等接口及其实现类，方便开发者使用和操作不同类型的数据结构。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
