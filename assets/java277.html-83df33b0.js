const e=JSON.parse('{"key":"v-66bae1aa","path":"/zh/programBlog/ServerSideLanguage/Java/java277.html","title":"Java-JDK8~11主要新特性及其简单示例","lang":"zh-CN","frontmatter":{"title":"Java-JDK8~11主要新特性及其简单示例","icon":"page","sticky":20230619171351,"order":277,"author":"涎涎","date":"2023-06-19T17:13:51.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java277.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java-JDK8~11主要新特性及其简单示例"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java277.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java-JDK8~11主要新特性及其简单示例"}],["meta",{"property":"og:description","content":"Java-JDK8~11主要新特性及其简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 概念 以下是一些较新的 JDK 版本中引入的主要特性： JDK 8： Lambda 表达式和函数式接口：引入函数式编程的概念，简化代码书写。 Stream API：提供了一种流式操作集合的方式，支持函数式编程和并行处理。 默认方法（Default Methods）：接口中可以定义默认的方法实现。 方法引用（Method References）：简化方法调用的语法。 重复注解（Repeatable Annotations）：允许在同一地方使用多个相同类型的注解。 Optional 类：提供了一种处理可能为空值的情况的方式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-06-19T17:13:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java-JDK8~11主要新特性及其简单示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-19T17:13:51.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java-JDK8~11主要新特性及其简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 概念 以下是一些较新的 JDK 版本中引入的主要特性： JDK 8： Lambda 表达式和函数式接口：引入函数式编程的概念，简化代码书写。 Stream API：提供了一种流式操作集合的方式，支持函数式编程和并行处理。 默认方法（Default Methods）：接口中可以定义默认的方法实现。 方法引用（Method References）：简化方法调用的语法。 重复注解（Repeatable Annotations）：允许在同一地方使用多个相同类型的注解。 Optional 类：提供了一种处理可能为空值的情况的方式。"},"headers":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":4.39,"words":1317},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/277-Java-JDK8~11主要新特性及其简单示例.md","localizedDate":"2023年6月19日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> Java-JDK8~11主要新特性及其简单示例</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<h3> 概念</h3>\\n<ul>\\n<li>\\n<p>以下是一些较新的 JDK 版本中引入的主要特性：</p>\\n</li>\\n<li>\\n<p>JDK 8：</p>\\n</li>\\n</ul>\\n<ul>\\n<li>Lambda 表达式和函数式接口：引入函数式编程的概念，简化代码书写。</li>\\n<li>Stream API：提供了一种流式操作集合的方式，支持函数式编程和并行处理。</li>\\n<li>默认方法（Default Methods）：接口中可以定义默认的方法实现。</li>\\n<li>方法引用（Method References）：简化方法调用的语法。</li>\\n<li>重复注解（Repeatable Annotations）：允许在同一地方使用多个相同类型的注解。</li>\\n<li>Optional 类：提供了一种处理可能为空值的情况的方式。</li>\\n</ul>","autoDesc":true}');export{e as data};
