const n=JSON.parse('{"key":"v-dd37ed9e","path":"/zh/programBlog/ServerSideLanguage/Java/java281.html","title":"Java消息中间件使用简单示例","lang":"zh-CN","frontmatter":{"title":"Java消息中间件使用简单示例","icon":"page","sticky":20230620154212,"order":281,"author":"涎涎","date":"2023-06-20T15:42:12.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java281.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java消息中间件使用简单示例"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java281.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java消息中间件使用简单示例"}],["meta",{"property":"og:description","content":"Java消息中间件使用简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Java 中常见的消息中间件有 Kafka 和 RabbitMQ。以下是它们的简单使用示例： Kafka 示例： 首先，确保已经安装和启动了 Kafka。然后，使用 Kafka 的 Java 客户端库进行消息的生产和消费。 生产者示例： import org.apache.kafka.clients.producer.*; public class KafkaProducerExample { public static void main(String[] args) { Properties props = new Properties(); props.put(\\"bootstrap.servers\\", \\"localhost:9092\\"); props.put(\\"key.serializer\\", \\"org.apache.kafka.common.serialization.StringSerializer\\"); props.put(\\"value.serializer\\", \\"org.apache.kafka.common.serialization.StringSerializer\\"); Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); String topic = \\"my-topic\\"; String message = \\"Hello, Kafka!\\"; ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(topic, message); producer.send(record, new Callback() { @Override public void onCompletion(RecordMetadata metadata, Exception exception) { if (exception != null) { System.err.println(\\"Failed to send message: \\" + exception.getMessage()); } else { System.out.println(\\"Message sent successfully! Topic: \\" + metadata.topic() + \\", Partition: \\" + metadata.partition() + \\", Offset: \\" + metadata.offset()); } } }); producer.close(); } } 消费者示例： import org.apache.kafka.clients.consumer.*; import java.util.Collections; public class KafkaConsumerExample { public static void main(String[] args) { Properties props = new Properties(); props.put(\\"bootstrap.servers\\", \\"localhost:9092\\"); props.put(\\"group.id\\", \\"my-consumer-group\\"); props.put(\\"key.deserializer\\", \\"org.apache.kafka.common.serialization.StringDeserializer\\"); props.put(\\"value.deserializer\\", \\"org.apache.kafka.common.serialization.StringDeserializer\\"); KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props); String topic = \\"my-topic\\"; consumer.subscribe(Collections.singletonList(topic)); while (true) { ConsumerRecords&lt;String, String&gt; records = consumer.poll(100); for (ConsumerRecord&lt;String, String&gt; record : records) { System.out.println(\\"Received message: \\" + record.value()); } } consumer.close(); } } 在这个示例中，生产者使用 Kafka 的 Java 客户端库发送消息到指定的主题（topic），消费者则通过订阅主题并持续地拉取消息进行消费。 RabbitMQ 示例： 首先，确保已经安装和启动了 RabbitMQ。然后，使用 RabbitMQ 的 Java 客户端库进行消息的生产和消费。 生产者示例： import com.rabbitmq.client.*; public class RabbitMQProducerExample { private final static String QUEUE_NAME = \\"my-queue\\"; public static void main(String[] args) throws Exception { ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\\"localhost\\"); try (Connection connection = factory.newConnection(); Channel channel = connection.createChannel()) { channel.queueDeclare(QUEUE_NAME, false, false, false, null); String message = \\"Hello, RabbitMQ!\\"; channel.basicPublish(\\"\\", QUEUE_NAME, null, message.getBytes()); System.out.println(\\"Message sent successfully: \\" + message); } } } 消费者示例： import com.rabbitmq.client.*; public class RabbitMQConsumerExample { private final static String QUEUE_NAME = \\"my-queue\\"; public static void main(String[] args) throws Exception { ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\\"localhost\\"); try (Connection connection = factory.newConnection(); Channel channel = connection.createChannel()) { channel.queueDeclare(QUEUE_NAME, false, false, false, null); DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; { String message = new String(delivery.getBody()); System.out.println(\\"Received message: \\" + message); }; channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -&gt; {}); System.out.println(\\"Waiting for messages...\\"); Thread.sleep(5000); // 持续等待消息的到达 } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-06-20T15:42:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java消息中间件使用简单示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-20T15:42:12.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java消息中间件使用简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Java 中常见的消息中间件有 Kafka 和 RabbitMQ。以下是它们的简单使用示例： Kafka 示例： 首先，确保已经安装和启动了 Kafka。然后，使用 Kafka 的 Java 客户端库进行消息的生产和消费。 生产者示例： import org.apache.kafka.clients.producer.*; public class KafkaProducerExample { public static void main(String[] args) { Properties props = new Properties(); props.put(\\"bootstrap.servers\\", \\"localhost:9092\\"); props.put(\\"key.serializer\\", \\"org.apache.kafka.common.serialization.StringSerializer\\"); props.put(\\"value.serializer\\", \\"org.apache.kafka.common.serialization.StringSerializer\\"); Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); String topic = \\"my-topic\\"; String message = \\"Hello, Kafka!\\"; ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(topic, message); producer.send(record, new Callback() { @Override public void onCompletion(RecordMetadata metadata, Exception exception) { if (exception != null) { System.err.println(\\"Failed to send message: \\" + exception.getMessage()); } else { System.out.println(\\"Message sent successfully! Topic: \\" + metadata.topic() + \\", Partition: \\" + metadata.partition() + \\", Offset: \\" + metadata.offset()); } } }); producer.close(); } } 消费者示例： import org.apache.kafka.clients.consumer.*; import java.util.Collections; public class KafkaConsumerExample { public static void main(String[] args) { Properties props = new Properties(); props.put(\\"bootstrap.servers\\", \\"localhost:9092\\"); props.put(\\"group.id\\", \\"my-consumer-group\\"); props.put(\\"key.deserializer\\", \\"org.apache.kafka.common.serialization.StringDeserializer\\"); props.put(\\"value.deserializer\\", \\"org.apache.kafka.common.serialization.StringDeserializer\\"); KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props); String topic = \\"my-topic\\"; consumer.subscribe(Collections.singletonList(topic)); while (true) { ConsumerRecords&lt;String, String&gt; records = consumer.poll(100); for (ConsumerRecord&lt;String, String&gt; record : records) { System.out.println(\\"Received message: \\" + record.value()); } } consumer.close(); } } 在这个示例中，生产者使用 Kafka 的 Java 客户端库发送消息到指定的主题（topic），消费者则通过订阅主题并持续地拉取消息进行消费。 RabbitMQ 示例： 首先，确保已经安装和启动了 RabbitMQ。然后，使用 RabbitMQ 的 Java 客户端库进行消息的生产和消费。 生产者示例： import com.rabbitmq.client.*; public class RabbitMQProducerExample { private final static String QUEUE_NAME = \\"my-queue\\"; public static void main(String[] args) throws Exception { ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\\"localhost\\"); try (Connection connection = factory.newConnection(); Channel channel = connection.createChannel()) { channel.queueDeclare(QUEUE_NAME, false, false, false, null); String message = \\"Hello, RabbitMQ!\\"; channel.basicPublish(\\"\\", QUEUE_NAME, null, message.getBytes()); System.out.println(\\"Message sent successfully: \\" + message); } } } 消费者示例： import com.rabbitmq.client.*; public class RabbitMQConsumerExample { private final static String QUEUE_NAME = \\"my-queue\\"; public static void main(String[] args) throws Exception { ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\\"localhost\\"); try (Connection connection = factory.newConnection(); Channel channel = connection.createChannel()) { channel.queueDeclare(QUEUE_NAME, false, false, false, null); DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; { String message = new String(delivery.getBody()); System.out.println(\\"Received message: \\" + message); }; channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -&gt; {}); System.out.println(\\"Waiting for messages...\\"); Thread.sleep(5000); // 持续等待消息的到达 } } }"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":2.37,"words":710},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/281-Java消息中间件使用简单示例.md","localizedDate":"2023年6月20日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> Java消息中间件使用简单示例</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<blockquote>\\n<p>Java 中常见的消息中间件有 Kafka 和 RabbitMQ。以下是它们的简单使用示例：</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p>Kafka 示例：</p>\\n<p>首先，确保已经安装和启动了 Kafka。然后，使用 Kafka 的 Java 客户端库进行消息的生产和消费。</p>\\n<p>生产者示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>kafka<span class=\\"token punctuation\\">.</span>clients<span class=\\"token punctuation\\">.</span>producer<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">KafkaProducerExample</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Properties</span> props <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Properties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"bootstrap.servers\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"localhost:9092\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"key.serializer\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"org.apache.kafka.common.serialization.StringSerializer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"value.serializer\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"org.apache.kafka.common.serialization.StringSerializer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">Producer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> producer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">KafkaProducer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">String</span> topic <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"my-topic\\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">String</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello, Kafka!\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">ProducerRecord</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> record <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ProducerRecord</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>topic<span class=\\"token punctuation\\">,</span> message<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        producer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span>record<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Callback</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token annotation punctuation\\">@Override</span>\\n            <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">onCompletion</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RecordMetadata</span> metadata<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Exception</span> exception<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>exception <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to send message: \\"</span> <span class=\\"token operator\\">+</span> exception<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Message sent successfully! Topic: \\"</span> <span class=\\"token operator\\">+</span> metadata<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">topic</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\", Partition: \\"</span> <span class=\\"token operator\\">+</span> metadata<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\", Offset: \\"</span> <span class=\\"token operator\\">+</span> metadata<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">offset</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        producer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>消费者示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>kafka<span class=\\"token punctuation\\">.</span>clients<span class=\\"token punctuation\\">.</span>consumer<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Collections</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">KafkaConsumerExample</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Properties</span> props <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Properties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"bootstrap.servers\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"localhost:9092\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"group.id\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"my-consumer-group\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"key.deserializer\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"org.apache.kafka.common.serialization.StringDeserializer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        props<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"value.deserializer\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"org.apache.kafka.common.serialization.StringDeserializer\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">KafkaConsumer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> consumer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">KafkaConsumer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">String</span> topic <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"my-topic\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n        consumer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subscribe</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Collections</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">singletonList</span><span class=\\"token punctuation\\">(</span>topic<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">ConsumerRecords</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> records <span class=\\"token operator\\">=</span> consumer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">poll</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ConsumerRecord</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> record <span class=\\"token operator\\">:</span> records<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Received message: \\"</span> <span class=\\"token operator\\">+</span> record<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        consumer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在这个示例中，生产者使用 Kafka 的 Java 客户端库发送消息到指定的主题（topic），消费者则通过订阅主题并持续地拉取消息进行消费。</p>\\n</li>\\n<li>\\n<p>RabbitMQ 示例：</p>\\n<p>首先，确保已经安装和启动了 RabbitMQ。然后，使用 RabbitMQ 的 Java 客户端库进行消息的生产和消费。</p>\\n<p>生产者示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>rabbitmq<span class=\\"token punctuation\\">.</span>client<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RabbitMQProducerExample</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">QUEUE_NAME</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"my-queue\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ConnectionFactory</span> factory <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConnectionFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        factory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setHost</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"localhost\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Connection</span> connection <span class=\\"token operator\\">=</span> factory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newConnection</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n             <span class=\\"token class-name\\">Channel</span> channel <span class=\\"token operator\\">=</span> connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createChannel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            channel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queueDeclare</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">QUEUE_NAME</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello, RabbitMQ!\\"</span><span class=\\"token punctuation\\">;</span>\\n            channel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">basicPublish</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">QUEUE_NAME</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> message<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Message sent successfully: \\"</span> <span class=\\"token operator\\">+</span> message<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>消费者示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>rabbitmq<span class=\\"token punctuation\\">.</span>client<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RabbitMQConsumerExample</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">QUEUE_NAME</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"my-queue\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ConnectionFactory</span> factory <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConnectionFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        factory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setHost</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"localhost\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Connection</span> connection <span class=\\"token operator\\">=</span> factory<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newConnection</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n             <span class=\\"token class-name\\">Channel</span> channel <span class=\\"token operator\\">=</span> connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createChannel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            channel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queueDeclare</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">QUEUE_NAME</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">DeliverCallback</span> deliverCallback <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>consumerTag<span class=\\"token punctuation\\">,</span> delivery<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">String</span> message <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span>delivery<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBody</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Received message: \\"</span> <span class=\\"token operator\\">+</span> message<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n            channel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">basicConsume</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">QUEUE_NAME</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> deliverCallback<span class=\\"token punctuation\\">,</span> consumerTag <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Waiting for messages...\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 持续等待消息的到达</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
