const t=JSON.parse('{"key":"v-61d2c8d1","path":"/zh/programBlog/ServerSideLanguage/Java/java193.html","title":"Java面向对象高级特性-覆盖","lang":"zh-CN","frontmatter":{"title":"Java面向对象高级特性-覆盖","icon":"page","order":193,"author":"涎涎","date":"2023-01-05T13:51:14.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java193.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java面向对象高级特性-覆盖"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java193.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java面向对象高级特性-覆盖"}],["meta",{"property":"og:description","content":"Java面向对象高级特性-覆盖 概念 示例代码 package com.tencent.chapter07.覆盖; //员工：总的父类 public class Employee extends Object{ \\t//属性（成员变量） \\t\\tString name; \\t\\t \\t\\tString birth; \\t\\t \\t\\tdouble salary; \\t\\t \\t\\t//无参构造函数 \\t\\tpublic Employee() \\t\\t{ \\t\\t\\tSystem.out.println(\\"父类实例化----new Employee()\\"); \\t\\t} \\t\\t//带参数构造函数 \\t\\tpublic Employee(String name,String birth,double salary) \\t\\t{ \\t\\t\\tthis.name = name; \\t\\t\\tthis.birth = birth; \\t\\t\\tthis.salary = salary; \\t\\t} \\t\\t \\t\\t//行为（成员方法） \\t\\tpublic void getDetail() \\t\\t{ \\t\\t\\tSystem.out.println(\\"name:\\" + name + \\" birth:\\" + birth + \\" salary:\\" + salary); \\t\\t} \\t\\t \\t\\tpublic double getSalary() \\t\\t{ \\t\\t\\treturn salary; \\t\\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-30T04:53:46.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-05T13:51:14.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-30T04:53:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java面向对象高级特性-覆盖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-05T13:51:14.000Z\\",\\"dateModified\\":\\"2023-05-30T04:53:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java面向对象高级特性-覆盖 概念 示例代码 package com.tencent.chapter07.覆盖; //员工：总的父类 public class Employee extends Object{ \\t//属性（成员变量） \\t\\tString name; \\t\\t \\t\\tString birth; \\t\\t \\t\\tdouble salary; \\t\\t \\t\\t//无参构造函数 \\t\\tpublic Employee() \\t\\t{ \\t\\t\\tSystem.out.println(\\"父类实例化----new Employee()\\"); \\t\\t} \\t\\t//带参数构造函数 \\t\\tpublic Employee(String name,String birth,double salary) \\t\\t{ \\t\\t\\tthis.name = name; \\t\\t\\tthis.birth = birth; \\t\\t\\tthis.salary = salary; \\t\\t} \\t\\t \\t\\t//行为（成员方法） \\t\\tpublic void getDetail() \\t\\t{ \\t\\t\\tSystem.out.println(\\"name:\\" + name + \\" birth:\\" + birth + \\" salary:\\" + salary); \\t\\t} \\t\\t \\t\\tpublic double getSalary() \\t\\t{ \\t\\t\\treturn salary; \\t\\t} }"},"headers":[],"git":{"createdTime":1684701424000,"updatedTime":1685422426000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":4}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/193-Java面向对象高级特性-覆盖.md","localizedDate":"2023年1月5日","excerpt":"<!-- more -->\\n<h1> Java面向对象高级特性-覆盖</h1>\\n<h4> 概念</h4>\\n<figure><img src=\\"http://rvg3orptc.hd-bkt.clouddn.com/assets/Java_193_1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h4> 示例代码</h4>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter07.覆盖;\\n\\n//员工：总的父类\\npublic class Employee extends Object{\\n\\t//属性（成员变量）\\n\\t\\tString name;\\n\\t\\t\\n\\t\\tString birth;\\n\\t\\t\\n\\t\\tdouble salary;\\n\\t\\t\\n\\t\\t//无参构造函数\\n\\t\\tpublic Employee()\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(\\"父类实例化----new Employee()\\");\\n\\t\\t}\\n\\t\\t//带参数构造函数\\n\\t\\tpublic Employee(String name,String birth,double salary)\\n\\t\\t{\\n\\t\\t\\tthis.name = name;\\n\\t\\t\\tthis.birth = birth;\\n\\t\\t\\tthis.salary = salary;\\n\\t\\t}\\n\\t\\t\\n\\t\\t//行为（成员方法）\\n\\t\\tpublic void getDetail()\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(\\"name:\\" + name + \\"   birth:\\" + birth + \\"  salary:\\" + salary);\\n\\t\\t}\\n\\t\\t\\n\\t\\tpublic double getSalary()\\n\\t\\t{\\n\\t\\t\\treturn salary;\\n\\t\\t}\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
