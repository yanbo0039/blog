const t=JSON.parse('{"key":"v-90c653f0","path":"/zh/programBlog/ServerSideLanguage/SpringBoot/springboot4.html","title":"Spring的事务管理的传播策略","lang":"zh-CN","frontmatter":{"title":"Spring的事务管理的传播策略","icon":"page","order":4,"author":"涎涎","date":"2023-06-19T19:46:52.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/SpringBoot/springboot4.html","category":["SpringBoot"],"tag":["SpringBoot"],"head":[["meta",{"name":"keywords","content":"Spring的事务管理的传播策略"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/SpringBoot/springboot4.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Spring的事务管理的传播策略"}],["meta",{"property":"og:description","content":"Spring的事务管理的传播策略 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Spring 的事务管理中有多种传播策略，用于控制事务的行为和边界。下面是几种常用的传播策略以及相应的示例说明： REQUIRED（默认）：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新事务。如果方法被嵌套调用，被嵌套的方法将会在同一个事务中执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2023-06-19T19:46:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring的事务管理的传播策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-19T19:46:52.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Spring的事务管理的传播策略 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 Spring 的事务管理中有多种传播策略，用于控制事务的行为和边界。下面是几种常用的传播策略以及相应的示例说明： REQUIRED（默认）：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新事务。如果方法被嵌套调用，被嵌套的方法将会在同一个事务中执行。"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":1.87,"words":561},"filePathRelative":"zh/programBlog/ServerSideLanguage/SpringBoot/4-Spring的事务管理的传播策略.md","localizedDate":"2023年6月19日","excerpt":"<!-- more -->\\n<h1> Spring的事务管理的传播策略</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<ul>\\n<li>Spring 的事务管理中有多种传播策略，用于控制事务的行为和边界。下面是几种常用的传播策略以及相应的示例说明：</li>\\n</ul>\\n<ol>\\n<li>REQUIRED（默认）：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新事务。如果方法被嵌套调用，被嵌套的方法将会在同一个事务中执行。</li>\\n</ol>","autoDesc":true}');export{t as data};
