const n=JSON.parse('{"key":"v-1b237eb0","path":"/zh/programBlog/Database/Oracle/57-Oracle-SQL%E5%BC%80%E5%8F%91%20%E2%80%94%E2%80%94%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8E%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6.html","title":"Oracle-SQL开发 —— 数据操作与事务控制","lang":"zh-CN","frontmatter":{"title":"Oracle-SQL开发 —— 数据操作与事务控制","icon":"page","order":57,"author":"涎涎","date":"2023-01-20T00:00:00.000Z","category":["Oracle"],"tag":["Oracle"],"head":[["meta",{"name":"keywords","content":"Oracle-SQL开发 —— 数据操作与事务控制"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/Database/Oracle/57-Oracle-SQL%E5%BC%80%E5%8F%91%20%E2%80%94%E2%80%94%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8E%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Oracle-SQL开发 —— 数据操作与事务控制"}],["meta",{"property":"og:description","content":"57-Oracle-SQL开发 —— 数据操作与事务控制.md 概念 数据操作语言 Data Manipulation Language ,简称DML，主要用来实现对数据库表中的数据进行操作。 数据操作语言主要包括如下几种： 增加行数据：使用INSERT语句实现 修改行数据：使用UPDATE语句实现 删除行数据：使用DELETE语句实现 合并行数据：按照指定条件合并两个表的数据，使用MERGE语句实现 事务(Transaction)概念 事务：也称工作单元，是由一个或多个SQL语句所组成的操作序列，这些SQL语句作为一个完整的工作单元，要么全部 执行成功，要么全部执行失败。在数据库中，通过事务来 保证数据的一致性。 事务处理语言：Transaction Process Language ,简称TPL， 主要用来对组成事务的DML语句的操作结果进行确认或取消。 确认也就是使DML操作生效，使用提交(COMMIT)命令实现； 取消也就是使DML操作失效，使用回滚(ROLLBACK)命令实现。 通过事务的使用，能防止数据库中出现数据不一致现象。 如两个银行账户进行转账，涉及到两条更新操作，这两条 更新操作只允许全部成功或失败，否则数据会出现不一致的现象。 事务组成 在数据库中，事务由一组相关的DML或SELECT语句，加上一 个TPL语句（COMMIT、ROLLBACK）或一个DDL语句(CREATE、 ALTER、DROP、TRUNCATE等)或一个DCL（GRANT、REVOKE） 语句。 例：如下语句组成两个事务。 INSERT…. UPDATE…. DELETE…. SELECT…. INSERT… COMMIT;-- 前6条语句，组成第1个事务 UPDATE… DELETE…. CREATE… ;--后3条语句，组成第2个事务 事务特征可用四个字母的缩写表示：即ACID 原子性（Atomicity） 事务就像“原子”一样，不可被分割，组成事务的DML操作语 句要么全成功，要么全失败，不可能出现部分成功部分失败 的情况。 一致性（Consistency） 一旦事务完成，不管是成功的，还是失败的，整个系统处于 数据一致的状态。 隔离性（Isolation） 一个事务的执行不会被另一个事务所干扰。比如两个人同时 从一个账户从取钱，通过事务的隔离性确保账户余额的正确 性。 持久性（Durability） 也称为永久性，指事务一旦提交，对数据的改变就是永久的， 不可以再被回滚。 显示结束 提交(COMMIT)：使用COMMIT命令实现，以成功的方式结束事 务，组成事务的DML语句操作全部生效。 回滚(ROLLBACK)：使用ROLLBACK命令实现，以失败的方式结 束事务，组成事务的DML语句操作全部被取消。 隐式结束 隐式提交：当下列任意一种情况发生时，会发生隐式提交 执行一个DDL(CREATE、ALTER、DROP、TRUNCATE、RENAME） 语句； 执行一个DCL(GRANT、REVOKE)语句； 从SQL*Plus正常退出（即使用EXIT或QUIT命令退出）； 隐式回滚：当下列任意一种情况发生时，会发生隐式回滚 从SQL*Plus中强行退出 客户端连接到服务器端异常中断 系统崩溃 事务开启 事务自动开启于上一个事务结束后，执行的第一个DML语句。 例如： …. COMMIT; --结束一个事务； SELECT…. INSERT…. --开启一个事务 UPDATE…. DELETE…. SELECT…. INSERT… COMMIT; --结束一个事务 UPDATE… --开启一个事务 DELETE…. ROLLBACK… ;--结束一个事务 设置保存点 设置保存点：如果在一个事务内，想要回滚到指 定位置，不是回滚到事务的起始点，可以通过保 存点(SAVEPOINT)来实现。 SAVEPOINT savepointname；--定义一个保存点语句； ROLLBACK TO savepointname;--回滚到指定保存点 注意：如上两条语句不结束事务的执行 锁的概念 锁用来在多用户并发访问和操作数据库时,保证数据的一致 性的一种机制; 锁由Oracle自动管理，如一个DML操作，ORACLE默认的机制 是在DML操作影响的行记录上自动加锁; 锁在被相关的操作申请并持有后，会一直保持到事务的结 束，事务结束后，锁才会被释放; 查询语句不会锁定任何记录，如果在查询语句后面加FOR UPDATE子句会锁定查询所影响的行记录; 提交或回滚前数据状态 提交(COMMIT)或回滚(ROLLBACK)前的数据状态 数据变化前的状态可以被恢复; 当前会话可以使用SELECT语句来验证DML操作后的结果; 其它会话不能查看由当前用户的DML操作结果; 受影响记录被锁定，也就是其它用户不能改变受影响记录中 的数据; 提交后数据状态 提交(COMMIT) 后的数据状态 在数据库中数据变化成为永久性的，先前的数据状态永久性 的消失； 所有用户/会话都可以查询到提交COMMIT后的结果； 锁定的记录被释放，可以有效地被其他用户操作； 所有的存储节点被清除； 回滚(ROLLBACK)后的数据状态 先前的数据状态被恢复; 锁定的记录被释放; 所有的存储节点被清除;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T10:10:00.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Oracle"}],["meta",{"property":"article:published_time","content":"2023-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T10:10:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Oracle-SQL开发 —— 数据操作与事务控制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-15T10:10:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"57-Oracle-SQL开发 —— 数据操作与事务控制.md 概念 数据操作语言 Data Manipulation Language ,简称DML，主要用来实现对数据库表中的数据进行操作。 数据操作语言主要包括如下几种： 增加行数据：使用INSERT语句实现 修改行数据：使用UPDATE语句实现 删除行数据：使用DELETE语句实现 合并行数据：按照指定条件合并两个表的数据，使用MERGE语句实现 事务(Transaction)概念 事务：也称工作单元，是由一个或多个SQL语句所组成的操作序列，这些SQL语句作为一个完整的工作单元，要么全部 执行成功，要么全部执行失败。在数据库中，通过事务来 保证数据的一致性。 事务处理语言：Transaction Process Language ,简称TPL， 主要用来对组成事务的DML语句的操作结果进行确认或取消。 确认也就是使DML操作生效，使用提交(COMMIT)命令实现； 取消也就是使DML操作失效，使用回滚(ROLLBACK)命令实现。 通过事务的使用，能防止数据库中出现数据不一致现象。 如两个银行账户进行转账，涉及到两条更新操作，这两条 更新操作只允许全部成功或失败，否则数据会出现不一致的现象。 事务组成 在数据库中，事务由一组相关的DML或SELECT语句，加上一 个TPL语句（COMMIT、ROLLBACK）或一个DDL语句(CREATE、 ALTER、DROP、TRUNCATE等)或一个DCL（GRANT、REVOKE） 语句。 例：如下语句组成两个事务。 INSERT…. UPDATE…. DELETE…. SELECT…. INSERT… COMMIT;-- 前6条语句，组成第1个事务 UPDATE… DELETE…. CREATE… ;--后3条语句，组成第2个事务 事务特征可用四个字母的缩写表示：即ACID 原子性（Atomicity） 事务就像“原子”一样，不可被分割，组成事务的DML操作语 句要么全成功，要么全失败，不可能出现部分成功部分失败 的情况。 一致性（Consistency） 一旦事务完成，不管是成功的，还是失败的，整个系统处于 数据一致的状态。 隔离性（Isolation） 一个事务的执行不会被另一个事务所干扰。比如两个人同时 从一个账户从取钱，通过事务的隔离性确保账户余额的正确 性。 持久性（Durability） 也称为永久性，指事务一旦提交，对数据的改变就是永久的， 不可以再被回滚。 显示结束 提交(COMMIT)：使用COMMIT命令实现，以成功的方式结束事 务，组成事务的DML语句操作全部生效。 回滚(ROLLBACK)：使用ROLLBACK命令实现，以失败的方式结 束事务，组成事务的DML语句操作全部被取消。 隐式结束 隐式提交：当下列任意一种情况发生时，会发生隐式提交 执行一个DDL(CREATE、ALTER、DROP、TRUNCATE、RENAME） 语句； 执行一个DCL(GRANT、REVOKE)语句； 从SQL*Plus正常退出（即使用EXIT或QUIT命令退出）； 隐式回滚：当下列任意一种情况发生时，会发生隐式回滚 从SQL*Plus中强行退出 客户端连接到服务器端异常中断 系统崩溃 事务开启 事务自动开启于上一个事务结束后，执行的第一个DML语句。 例如： …. COMMIT; --结束一个事务； SELECT…. INSERT…. --开启一个事务 UPDATE…. DELETE…. SELECT…. INSERT… COMMIT; --结束一个事务 UPDATE… --开启一个事务 DELETE…. ROLLBACK… ;--结束一个事务 设置保存点 设置保存点：如果在一个事务内，想要回滚到指 定位置，不是回滚到事务的起始点，可以通过保 存点(SAVEPOINT)来实现。 SAVEPOINT savepointname；--定义一个保存点语句； ROLLBACK TO savepointname;--回滚到指定保存点 注意：如上两条语句不结束事务的执行 锁的概念 锁用来在多用户并发访问和操作数据库时,保证数据的一致 性的一种机制; 锁由Oracle自动管理，如一个DML操作，ORACLE默认的机制 是在DML操作影响的行记录上自动加锁; 锁在被相关的操作申请并持有后，会一直保持到事务的结 束，事务结束后，锁才会被释放; 查询语句不会锁定任何记录，如果在查询语句后面加FOR UPDATE子句会锁定查询所影响的行记录; 提交或回滚前数据状态 提交(COMMIT)或回滚(ROLLBACK)前的数据状态 数据变化前的状态可以被恢复; 当前会话可以使用SELECT语句来验证DML操作后的结果; 其它会话不能查看由当前用户的DML操作结果; 受影响记录被锁定，也就是其它用户不能改变受影响记录中 的数据; 提交后数据状态 提交(COMMIT) 后的数据状态 在数据库中数据变化成为永久性的，先前的数据状态永久性 的消失； 所有用户/会话都可以查询到提交COMMIT后的结果； 锁定的记录被释放，可以有效地被其他用户操作； 所有的存储节点被清除； 回滚(ROLLBACK)后的数据状态 先前的数据状态被恢复; 锁定的记录被释放; 所有的存储节点被清除;"},"headers":[],"git":{"createdTime":1684145400000,"updatedTime":1684145400000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":11.89,"words":3568},"filePathRelative":"zh/programBlog/Database/Oracle/57-Oracle-SQL开发 —— 数据操作与事务控制.md","localizedDate":"2023年1月20日","excerpt":"<!-- more -->\\n<h1> 57-Oracle-SQL开发 —— <a href=\\"http://xn--jhqtlqvk5gjpk02fslah2f4yb.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据操作与事务控制.md</a></h1>\\n<h4> 概念</h4>\\n<ul>\\n<li>\\n<p>数据操作语言</p>\\n<ul>\\n<li>Data Manipulation Language ,简称DML，主要用来实现对数据库表中的数据进行操作。</li>\\n<li>数据操作语言主要包括如下几种：\\n<ul>\\n<li>增加行数据：使用INSERT语句实现</li>\\n<li>修改行数据：使用UPDATE语句实现</li>\\n<li>删除行数据：使用DELETE语句实现</li>\\n<li>合并行数据：按照指定条件合并两个表的数据，使用MERGE语句实现</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>事务(Transaction)概念</p>\\n<ul>\\n<li>事务：也称工作单元，是由一个或多个SQL语句所组成的操作序列，这些SQL语句作为一个完整的工作单元，要么全部\\n执行成功，要么全部执行失败。在数据库中，通过事务来\\n保证数据的一致性。</li>\\n<li>事务处理语言：Transaction Process Language ,简称TPL，\\n主要用来对组成事务的DML语句的操作结果进行确认或取消。\\n确认也就是使DML操作生效，使用提交(COMMIT)命令实现；\\n取消也就是使DML操作失效，使用回滚(ROLLBACK)命令实现。</li>\\n<li>通过事务的使用，能防止数据库中出现数据不一致现象。\\n如两个银行账户进行转账，涉及到两条更新操作，这两条\\n更新操作只允许全部成功或失败，否则数据会出现不一致的现象。</li>\\n</ul>\\n</li>\\n<li>\\n<p>事务组成</p>\\n<ul>\\n<li>在数据库中，事务由一组相关的DML或SELECT语句，加上一\\n个TPL语句（COMMIT、ROLLBACK）或一个DDL语句(CREATE、\\nALTER、DROP、TRUNCATE等)或一个DCL（GRANT、REVOKE）\\n语句。</li>\\n<li>例：如下语句组成两个事务。\\n<ul>\\n<li>INSERT….</li>\\n<li>UPDATE….</li>\\n<li>DELETE….</li>\\n<li>SELECT….</li>\\n<li>INSERT…</li>\\n<li>COMMIT;-- 前6条语句，组成第1个事务</li>\\n<li>UPDATE…</li>\\n<li>DELETE….</li>\\n<li>CREATE… ;--后3条语句，组成第2个事务</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>事务特征可用四个字母的缩写表示：即ACID</p>\\n<ul>\\n<li>原子性（Atomicity）</li>\\n</ul>\\n</li>\\n<li>\\n<p>事务就像“原子”一样，不可被分割，组成事务的DML操作语\\n句要么全成功，要么全失败，不可能出现部分成功部分失败\\n的情况。</p>\\n<ul>\\n<li>一致性（Consistency）</li>\\n<li>一旦事务完成，不管是成功的，还是失败的，整个系统处于\\n数据一致的状态。</li>\\n<li>隔离性（Isolation）</li>\\n</ul>\\n</li>\\n<li>\\n<p>一个事务的执行不会被另一个事务所干扰。比如两个人同时\\n从一个账户从取钱，通过事务的隔离性确保账户余额的正确\\n性。</p>\\n<ul>\\n<li>持久性（Durability）</li>\\n<li>也称为永久性，指事务一旦提交，对数据的改变就是永久的，\\n不可以再被回滚。</li>\\n</ul>\\n</li>\\n<li>\\n<p>显示结束</p>\\n<ul>\\n<li>提交(COMMIT)：使用COMMIT命令实现，以成功的方式结束事\\n务，组成事务的DML语句操作全部生效。</li>\\n<li>回滚(ROLLBACK)：使用ROLLBACK命令实现，以失败的方式结\\n束事务，组成事务的DML语句操作全部被取消。</li>\\n</ul>\\n</li>\\n<li>\\n<p>隐式结束</p>\\n<ul>\\n<li>隐式提交：当下列任意一种情况发生时，会发生隐式提交</li>\\n<li>执行一个DDL(CREATE、ALTER、DROP、TRUNCATE、RENAME）\\n语句；</li>\\n<li>执行一个DCL(GRANT、REVOKE)语句；</li>\\n<li>从SQL*Plus正常退出（即使用EXIT或QUIT命令退出）；</li>\\n</ul>\\n</li>\\n<li>\\n<p>隐式回滚：当下列任意一种情况发生时，会发生隐式回滚</p>\\n<ul>\\n<li>从SQL*Plus中强行退出</li>\\n<li>客户端连接到服务器端异常中断</li>\\n<li>系统崩溃</li>\\n</ul>\\n</li>\\n<li>\\n<p>事务开启</p>\\n<ul>\\n<li>事务自动开启于上一个事务结束后，执行的第一个DML语句。</li>\\n<li>例如：</li>\\n<li>….\\n<ul>\\n<li>COMMIT; --结束一个事务；</li>\\n<li>SELECT….</li>\\n<li>INSERT…. --开启一个事务</li>\\n<li>UPDATE….</li>\\n<li>DELETE….</li>\\n<li>SELECT….</li>\\n<li>INSERT…</li>\\n<li>COMMIT; --结束一个事务</li>\\n<li>UPDATE… --开启一个事务</li>\\n<li>DELETE….</li>\\n<li>ROLLBACK… ;--结束一个事务</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>设置保存点</p>\\n<ul>\\n<li>设置保存点：如果在一个事务内，想要回滚到指\\n定位置，不是回滚到事务的起始点，可以通过保\\n存点(SAVEPOINT)来实现。\\n<ul>\\n<li>SAVEPOINT savepointname；--定义一个保存点语句；</li>\\n<li>ROLLBACK TO savepointname;--回滚到指定保存点</li>\\n<li>注意：如上两条语句不结束事务的执行</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>锁的概念</p>\\n<ul>\\n<li>锁用来在多用户并发访问和操作数据库时,保证数据的一致\\n性的一种机制;</li>\\n<li>锁由Oracle自动管理，如一个DML操作，ORACLE默认的机制\\n是在DML操作影响的行记录上自动加锁;</li>\\n<li>锁在被相关的操作申请并持有后，会一直保持到事务的结\\n束，事务结束后，锁才会被释放;</li>\\n<li>查询语句不会锁定任何记录，如果在查询语句后面加FOR\\nUPDATE子句会锁定查询所影响的行记录;</li>\\n</ul>\\n</li>\\n<li>\\n<p>提交或回滚前数据状态</p>\\n<ul>\\n<li>提交(COMMIT)或回滚(ROLLBACK)前的数据状态\\n<ul>\\n<li>数据变化前的状态可以被恢复;</li>\\n<li>当前会话可以使用SELECT语句来验证DML操作后的结果;</li>\\n<li>其它会话不能查看由当前用户的DML操作结果;</li>\\n<li>受影响记录被锁定，也就是其它用户不能改变受影响记录中\\n的数据;</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>提交后数据状态</p>\\n<ul>\\n<li>提交(COMMIT) 后的数据状态\\n<ul>\\n<li>在数据库中数据变化成为永久性的，先前的数据状态永久性\\n的消失；</li>\\n<li>所有用户/会话都可以查询到提交COMMIT后的结果；</li>\\n<li>锁定的记录被释放，可以有效地被其他用户操作；</li>\\n<li>所有的存储节点被清除；</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>回滚(ROLLBACK)后的数据状态</p>\\n<ul>\\n<li>先前的数据状态被恢复;</li>\\n<li>锁定的记录被释放;</li>\\n<li>所有的存储节点被清除;</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
