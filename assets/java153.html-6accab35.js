import{_ as a,X as t,Y as s,a1 as r,Z as i,$ as e,a2 as n,a0 as o,F as d}from"./framework-68dd73a2.js";const c="/blog/assets/Java_153_1.png",u="/blog/assets/Java_153_2.png",v="/blog/assets/Java_153_3.png",p="/blog/assets/Java_153_4.png",m="/blog/assets/Java_153_5.png",g="/blog/assets/Java_153_6.png",_="/blog/assets/Java_153_7.png",b="/blog/assets/Java_153_8.png",h="/blog/assets/Java_153_9.png",f="/blog/assets/Java_153_10.png",S="/blog/assets/Java_153_11.png",x={},k={id:"_153-java-网络编程-md",tabindex:"-1"},P=i("a",{class:"header-anchor",href:"#_153-java-网络编程-md","aria-hidden":"true"},"#",-1),C={href:"http://xn--153-Java--j97wr10b5ta3x.md",target:"_blank",rel:"noopener noreferrer"},w=o('<h4 id="网络基础知识" tabindex="-1"><a class="header-anchor" href="#网络基础知识" aria-hidden="true">#</a> 网络基础知识</h4><ul><li>网络应用程序 <ul><li>在已实现了网络互联的不同的计算机上运行的程序，这些程序之间可以交换数据</li></ul></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>网络编程 — socket编程 <ul><li>通过使用套接字来达到进程间通信目的编程就是网络编程</li></ul></li></ul><h4 id="ip地址和端口号" tabindex="-1"><a class="header-anchor" href="#ip地址和端口号" aria-hidden="true">#</a> IP地址和端口号</h4><ul><li><p>IP</p><ul><li>TCP/IP协议 <ul><li>协议 —网络中计算机之间通信的规则</li><li>大多数的网络协议都以TCP/IP协议为基础</li></ul></li><li>IP地址 <ul><li>IP地址为每台计算机指定一个标识号，通过这 个标识号来指定要接收数据的计算机和识别发送数据的计算机</li></ul></li><li>IPV4/IPV6 <ul><li>IPV4 — 4个字节，即32位的二进制数表示</li><li>IPV6 — 16个字节的格式来表示IP地址</li></ul></li></ul></li><li><p>端口号 ? 一台计算机运上运行多个网络程序，IP地址只能保证把数据送到该计算机但如何确定把这些数据交给哪个程序呢</p></li><li><p>端口号是一个整数，用于表示该数据帧交给哪个应用程序来处理</p></li><li><p>同一台计算机上不能有两个使用同一个端口的程序运行</p></li><li><p>端口数范围为0~65535</p></li><li><p>0~1023用于一些知名的网络服务和应用，用户的普通网络程序应使用1024以上的端口号(博主建议用4000以上的端口，因为4000以下的端口号几乎被占用，如Oracle端口1521，mysql端口号3306,sqlserver端口号1433)</p></li><li><p>端口号查看命令</p><ul><li>在Windows 2000/XP/Server 2003中要查看端口，可以使用Netstat命令：</li><li>依次点击“开始→运行”，键入“cmd”并回车，打开命令提示符窗口。</li><li>在命令提示符状态下键入“netstat -a -n”，按下回车键后就可以看到以数字形式显示的TCP和UDP连接的端口号及状态。</li></ul></li></ul><p><strong>使用 netstat -a -n 查看哪些端口被使用</strong></p><p><img src="'+v+'" alt="" loading="lazy"><img src="'+p+'" alt="" loading="lazy"><img src="'+m+'" alt="" loading="lazy"><img src="'+g+`" alt="" loading="lazy"></p><p>若这些已被使用的端口写在如下代码中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package 网络编程;

import java.io.IOException;
import java.net.ServerSocket;

public class TestServer {

	public static void main(String[] args) {
 
		ServerSocket server;
		try {
			server = new ServerSocket(49884);
			server.accept();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则会报如下错误，表明端口已被使用</p><figure><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>TCP与UDP</p><ul><li>TCP（Transmission Control Protocol) <ul><li>面向连接的通信协议</li><li>提供两台计算机间的可靠的、端到端的字节流通信的协议</li></ul></li></ul></li><li><p>UDP（User Datagram Protocal）</p><ul><li>无连接的通信协议</li><li>UDP不保证可靠数据的传输</li></ul></li><li><p>Bs&amp;Cs</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BS
Browser
Server
所有可以通过浏览器访问的App都是BS架构的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CS

Client
Server

腾讯QQ  微信客户端程序  各种银行客户端程序
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>B2C&amp;B2B&amp;B2B2C&amp;B2C2C</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>B：商家

C：消费者
  to：2
  
  
B2B:  阿里巴巴

C2C:  淘宝

B2B2C:  天猫

B2C2C:京东  卖家  消费者
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Socket原理 <ul><li>Socket—套接字</li><li>是网络应用程序编程的接口和一种机制</li><li>用套接字中的相关函数来建立连接和完成通信</li><li>Socket可以看成在两个程序进行通讯连接中的一个端点</li><li>将区分不同应用程序进程的三个参数 <ul><li>通信的目的的IP地址</li><li>使用的传输层协议</li><li>使用的端口号与一个socket绑定</li></ul></li></ul></li></ul><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>端口工作原理 <ul><li>服务器上的端口不是监听端口。</li></ul></li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>基于TCP的Socket编程</li></ul><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>利用TCP协议进行通信两个应用程序，有主从之分 一个称为服务器程(Server)， 另外一个称为客户机程(Client)</li><li>交互过程 <ul><li>服务器程序创建一个ServerSocket,然后调用accept方法等待客户来连接</li><li>客户端程序创建一个socket并请求与服务器建立连接</li><li>刚才建立了连接的两个socket在一个单独的线程上对话</li><li>服务器开始等待新的连接请求</li></ul></li><li>基于TCP的Socket编程 <ul><li><p>ServerSocket —— java.net.ServerSocket</p></li><li><p>实现服务器套接字</p></li><li><p>构造函数</p><ul><li>ServerSocket(int port)</li><li>ServerSocket(int port, int maxqu)</li></ul></li><li><p>accept( ) 方法用于等待客户端触发通信，返回值类型为Socket</p></li></ul></li><li>Socket —— java.net.Socket <ul><li>实现客户端套接字</li><li>构造函数 <ul><li>Socket(String hostName, int port)</li><li>Socket(InetAddress a, int port)</li></ul></li><li>可用方法 <ul><li>InetAddress getInetAddress( )</li><li>int getPort( )</li><li>int getLocalPort( )</li><li>InputStream getInputStream()</li><li>OutputStream getOutputStream()</li><li>void close()</li></ul></li></ul></li></ul><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="拓展知识" tabindex="-1"><a class="header-anchor" href="#拓展知识" aria-hidden="true">#</a> 拓展知识：</h4>',27),I={href:"https://www.jianshu.com/p/ae5e1cee5b04",target:"_blank",rel:"noopener noreferrer"},J={href:"http://www.wityx.com/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://download.csdn.net/download/qq_34239028/10752957",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jianshu.com/p/b41391cd3ae8",target:"_blank",rel:"noopener noreferrer"},y={href:"http://www.java1234.com/a/javaziliao/bishi/2019/0226/13013.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.csdn.net/jacklittlepig/article/details/79043578",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.cnblogs.com/JLZT1223/p/7360036.html",target:"_blank",rel:"noopener noreferrer"},V=i("p",null,[i("strong",null,[e("以上就是我关于 "),i("em",null,"Java-网络编程"),e(" 知识点的整理与总结的全部内容")])],-1),A=i("hr",null,null,-1),N=i("h3",{id:"分割线",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#分割线","aria-hidden":"true"},"#"),e(" 分割线")],-1),D=i("hr",null,null,-1),q=i("p",null,[i("strong",null,"博主为咯学编程：父母不同意学编程，现已断绝关系;恋人不同意学编程，现已分手;亲戚不同意学编程，现已断绝来往;老板不同意学编程,现已失业三十年。。。。。。如果此博文有帮到你欢迎打赏，金额不限。。。")],-1);function E(O,U){const l=d("ExternalLinkIcon");return t(),s("div",null,[r(" more "),i("h1",k,[P,e(),i("a",C,[e("153-Java-网络编程.md"),n(l)])]),w,i("p",null,[i("a",I,[e("Java - 网络编程完全总结"),n(l)])]),i("p",null,[i("a",J,[e("Java面试题网"),n(l)])]),i("p",null,[i("a",B,[e("2019春招必备JAVA面试宝典-CSDN"),n(l)])]),i("p",null,[i("a",j,[e("Java面试宝典2019-简书"),n(l)])]),i("p",null,[i("a",y,[e("JAVA面试题2019 PDF 下载"),n(l)])]),i("p",null,[i("a",T,[e("Java 基础快速掌握 TCP 3次握手和4次握手的理解"),n(l)])]),i("p",null,[i("a",z,[e("Java网络编程三次握手四次挥手"),n(l)])]),V,A,N,D,q])}const F=a(x,[["render",E],["__file","java153.html.vue"]]);export{F as default};
