const t=JSON.parse('{"key":"v-0e19f5fa","path":"/zh/programBlog/ServerSideLanguage/Java/233-Java%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81-NIO.html","title":"Java文件与流-文件与流-NIO","lang":"zh-CN","frontmatter":{"title":"Java文件与流-文件与流-NIO","icon":"page","order":233,"author":"涎涎","date":"2023-01-13T14:34:33.000Z","isOriginal":true,"category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java文件与流-文件与流-NIO"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/233-Java%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B5%81-NIO.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java文件与流-文件与流-NIO"}],["meta",{"property":"og:description","content":"233-Java文件与流-文件与流-NIO.md 概念 示例代码 package com.tencent.chapter03.file; import java.nio.file.FileSystems; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardWatchEventKinds; import java.nio.file.WatchEvent; import java.nio.file.WatchKey; import java.nio.file.WatchService; public class WatchServiceDemo { \\tpublic static void main(String[] args) { \\t\\t/*监控目标路径 */ \\t\\tPath path = Paths.get(\\"D:\\\\\\\\temp\\"); \\t\\ttry { \\t\\t\\t/* 创建文件监控对象 */ \\t\\t\\tWatchService watchService = FileSystems.getDefault().newWatchService(); \\t\\t\\t/* 注册文件监控的所有事件类型 */ \\t\\t\\tpath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, \\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_DELETE, \\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_MODIFY); \\t\\t\\t/* 循环监测文件 */ \\t\\t\\twhile (true) { \\t\\t\\t\\tWatchKey watchKey = watchService.take(); \\t\\t\\t\\t/* 迭代触发事件的所有文件 */ \\t\\t\\t\\tfor (WatchEvent&lt;?&gt; event : watchKey.pollEvents()) \\t\\t\\t\\t\\tSystem.out.println(event.context().toString() + \\" 事件类型：\\" \\t\\t\\t\\t\\t\\t\\t+ event.kind()); \\t\\t\\t\\tif (!watchKey.reset()) \\t\\t\\t\\t\\treturn; \\t\\t\\t} \\t\\t} catch (Exception e) { \\t\\t\\te.printStackTrace(); \\t\\t} \\t} \\t }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T13:47:22.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-13T14:34:33.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T13:47:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java文件与流-文件与流-NIO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-13T14:34:33.000Z\\",\\"dateModified\\":\\"2023-05-21T13:47:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"233-Java文件与流-文件与流-NIO.md 概念 示例代码 package com.tencent.chapter03.file; import java.nio.file.FileSystems; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardWatchEventKinds; import java.nio.file.WatchEvent; import java.nio.file.WatchKey; import java.nio.file.WatchService; public class WatchServiceDemo { \\tpublic static void main(String[] args) { \\t\\t/*监控目标路径 */ \\t\\tPath path = Paths.get(\\"D:\\\\\\\\temp\\"); \\t\\ttry { \\t\\t\\t/* 创建文件监控对象 */ \\t\\t\\tWatchService watchService = FileSystems.getDefault().newWatchService(); \\t\\t\\t/* 注册文件监控的所有事件类型 */ \\t\\t\\tpath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, \\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_DELETE, \\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_MODIFY); \\t\\t\\t/* 循环监测文件 */ \\t\\t\\twhile (true) { \\t\\t\\t\\tWatchKey watchKey = watchService.take(); \\t\\t\\t\\t/* 迭代触发事件的所有文件 */ \\t\\t\\t\\tfor (WatchEvent&lt;?&gt; event : watchKey.pollEvents()) \\t\\t\\t\\t\\tSystem.out.println(event.context().toString() + \\" 事件类型：\\" \\t\\t\\t\\t\\t\\t\\t+ event.kind()); \\t\\t\\t\\tif (!watchKey.reset()) \\t\\t\\t\\t\\treturn; \\t\\t\\t} \\t\\t} catch (Exception e) { \\t\\t\\te.printStackTrace(); \\t\\t} \\t} \\t }"},"headers":[],"git":{"createdTime":1684145400000,"updatedTime":1684676842000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":3}]},"readingTime":{"minutes":1.04,"words":311},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/233-Java文件与流-文件与流-NIO.md","localizedDate":"2023年1月13日","excerpt":"<!-- more -->\\n<h1> <a href=\\"http://xn--233-Java--NIO-350ub328aca6905hda2760bea.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">233-Java文件与流-文件与流-NIO.md</a></h1>\\n<h4> 概念</h4>\\n<figure><img src=\\"/assets/Java_233_1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h4> 示例代码</h4>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter03.file;\\n\\nimport java.nio.file.FileSystems;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.nio.file.StandardWatchEventKinds;\\nimport java.nio.file.WatchEvent;\\nimport java.nio.file.WatchKey;\\nimport java.nio.file.WatchService;\\n\\npublic class WatchServiceDemo {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\t/*监控目标路径 */\\n\\t\\tPath path = Paths.get(\\"D:\\\\\\\\temp\\");\\n\\t\\ttry {\\n\\t\\t\\t/* 创建文件监控对象 */\\n\\t\\t\\tWatchService watchService = FileSystems.getDefault().newWatchService();\\n\\t\\t\\t/* 注册文件监控的所有事件类型 */\\n\\t\\t\\tpath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE,\\n\\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_DELETE,\\n\\t\\t\\t\\t\\tStandardWatchEventKinds.ENTRY_MODIFY);\\n\\t\\t\\t/* 循环监测文件 */\\n\\t\\t\\twhile (true) {\\n\\t\\t\\t\\tWatchKey watchKey = watchService.take();\\n\\t\\t\\t\\t/* 迭代触发事件的所有文件 */\\n\\t\\t\\t\\tfor (WatchEvent&lt;?&gt; event : watchKey.pollEvents())\\n\\t\\t\\t\\t\\tSystem.out.println(event.context().toString() + \\" 事件类型：\\"\\n\\t\\t\\t\\t\\t\\t\\t+ event.kind());\\n\\t\\t\\t\\tif (!watchKey.reset())\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\n\\t}\\n\\t\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
