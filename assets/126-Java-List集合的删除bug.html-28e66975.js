const t=JSON.parse('{"key":"v-b4239110","path":"/zh/programBlog/ServerSideLanguage/Java/126-Java-List%E9%9B%86%E5%90%88%E7%9A%84%E5%88%A0%E9%99%A4bug.html","title":"Java-List集合的删除bug","lang":"zh-CN","frontmatter":{"title":"Java-List集合的删除bug","icon":"page","order":126,"author":"涎涎","date":"2019-07-13T00:00:00.000Z","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java-List集合的删除bug"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/126-Java-List%E9%9B%86%E5%90%88%E7%9A%84%E5%88%A0%E9%99%A4bug.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java-List集合的删除bug"}],["meta",{"property":"og:description","content":"126-Java-List集合的删除bug.md package List集合; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class TestArrayListBug { \\tpublic static void main(String[] args) { \\t\\tList&lt;String&gt; list = new ArrayList&lt;&gt;(); \\t\\tlist.add(\\"abc\\"); \\t\\tlist.add(\\"777c\\"); \\t\\tlist.add(\\"123\\"); \\t\\tlist.add(\\"456\\"); \\t\\tlist.add(\\"456\\"); \\t\\tlist.add(\\"456\\");//4 3 \\t\\tlist.add(\\"aqqc\\"); \\t\\tlist.add(null); \\t\\tlist.add(null);// 7 6 \\t\\t \\t\\t//需求：把元素456删除 \\t\\t//用下面的代码如果两个456挨着，那么后面那个不会被删除 //\\t\\tfor (int i = 0; i &lt; list.size(); i++) {//0 ----- 7 list.get(7) //\\t\\t\\tif(\\"456\\".equals(list.get(i))) { //\\t\\t\\t\\tlist.remove(i); //\\t\\t\\t} //\\t\\t\\tSystem.out.println(list.get(i)); //\\t\\t} \\t\\t//解决方案：从后面往前删除就可以了 //\\t\\tfor (int i = list.size()-1; i &gt;=0; i--) { //\\t\\t\\tSystem.out.println(list.get(i)); //\\t\\t\\tif(\\"456\\".equals(list.get(i))) //\\t\\t\\t{ //\\t\\t\\t\\tlist.remove(i); //\\t\\t\\t} //\\t\\t} //\\t\\t //\\t\\tSystem.out.println(\\"==================\\"); //\\t\\tSystem.out.println(list.toString()); \\t\\t \\t\\t//我自己的理解，更好的删除方法，不会漏掉任何元素 \\t\\tfor (int i = 0; i &lt; list.size(); i++) { \\t\\t\\tif(\\"456\\".equals(list.get(i))) { \\t\\t\\t\\tlist.remove(i); \\t\\t\\t\\ti--; \\t\\t\\t} \\t\\t} \\t\\tSystem.out.println(Arrays.toString(list.toArray())); \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2019-07-13T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java-List集合的删除bug\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"126-Java-List集合的删除bug.md package List集合; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class TestArrayListBug { \\tpublic static void main(String[] args) { \\t\\tList&lt;String&gt; list = new ArrayList&lt;&gt;(); \\t\\tlist.add(\\"abc\\"); \\t\\tlist.add(\\"777c\\"); \\t\\tlist.add(\\"123\\"); \\t\\tlist.add(\\"456\\"); \\t\\tlist.add(\\"456\\"); \\t\\tlist.add(\\"456\\");//4 3 \\t\\tlist.add(\\"aqqc\\"); \\t\\tlist.add(null); \\t\\tlist.add(null);// 7 6 \\t\\t \\t\\t//需求：把元素456删除 \\t\\t//用下面的代码如果两个456挨着，那么后面那个不会被删除 //\\t\\tfor (int i = 0; i &lt; list.size(); i++) {//0 ----- 7 list.get(7) //\\t\\t\\tif(\\"456\\".equals(list.get(i))) { //\\t\\t\\t\\tlist.remove(i); //\\t\\t\\t} //\\t\\t\\tSystem.out.println(list.get(i)); //\\t\\t} \\t\\t//解决方案：从后面往前删除就可以了 //\\t\\tfor (int i = list.size()-1; i &gt;=0; i--) { //\\t\\t\\tSystem.out.println(list.get(i)); //\\t\\t\\tif(\\"456\\".equals(list.get(i))) //\\t\\t\\t{ //\\t\\t\\t\\tlist.remove(i); //\\t\\t\\t} //\\t\\t} //\\t\\t //\\t\\tSystem.out.println(\\"==================\\"); //\\t\\tSystem.out.println(list.toString()); \\t\\t \\t\\t//我自己的理解，更好的删除方法，不会漏掉任何元素 \\t\\tfor (int i = 0; i &lt; list.size(); i++) { \\t\\t\\tif(\\"456\\".equals(list.get(i))) { \\t\\t\\t\\tlist.remove(i); \\t\\t\\t\\ti--; \\t\\t\\t} \\t\\t} \\t\\tSystem.out.println(Arrays.toString(list.toArray())); \\t} }"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/126-Java-List集合的删除bug.md","localizedDate":"2019年7月13日","excerpt":"<!-- more -->\\n<h1> <a href=\\"http://xn--126-Java-Listbug-4830a74wmn1p5hsfyxb.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">126-Java-List集合的删除bug.md</a></h1>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>package List集合;\\n\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\npublic class TestArrayListBug {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tList&lt;String&gt; list = new ArrayList&lt;&gt;();\\n\\t\\tlist.add(\\"abc\\");\\n\\t\\tlist.add(\\"777c\\");\\n\\t\\tlist.add(\\"123\\");\\n\\t\\tlist.add(\\"456\\");\\n\\t\\tlist.add(\\"456\\");\\n\\t\\tlist.add(\\"456\\");//4  3\\n\\t\\tlist.add(\\"aqqc\\");\\n\\t\\tlist.add(null);\\n\\t\\tlist.add(null);// 7  6\\n\\t\\t\\n\\t\\t//需求：把元素456删除\\n\\t\\t//用下面的代码如果两个456挨着，那么后面那个不会被删除\\n//\\t\\tfor (int i = 0; i &lt; list.size(); i++) {//0 ----- 7 list.get(7)\\n//\\t\\t\\tif(\\"456\\".equals(list.get(i))) {\\n//\\t\\t\\t\\tlist.remove(i);\\n//\\t\\t\\t}\\n//\\t\\t\\tSystem.out.println(list.get(i));\\n//\\t\\t}\\n\\t\\t//解决方案：从后面往前删除就可以了\\n//\\t\\tfor (int i = list.size()-1; i &gt;=0; i--) {\\n//\\t\\t\\tSystem.out.println(list.get(i));\\n//\\t\\t\\tif(\\"456\\".equals(list.get(i)))\\n//\\t\\t\\t{\\n//\\t\\t\\t\\tlist.remove(i);\\n//\\t\\t\\t}\\n//\\t\\t}\\n//\\t\\t\\n//\\t\\tSystem.out.println(\\"==================\\");\\n//\\t\\tSystem.out.println(list.toString());\\n\\t\\t\\n\\t\\t//我自己的理解，更好的删除方法，不会漏掉任何元素\\n\\t\\tfor (int i = 0; i &lt; list.size(); i++) {\\n\\t\\t\\tif(\\"456\\".equals(list.get(i))) {\\n\\t\\t\\t\\tlist.remove(i);\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tSystem.out.println(Arrays.toString(list.toArray()));\\n\\t}\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
