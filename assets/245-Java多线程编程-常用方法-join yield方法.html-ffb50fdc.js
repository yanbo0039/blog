const t=JSON.parse('{"key":"v-284a4231","path":"/zh/programBlog/ServerSideLanguage/Java/245-Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-join%20yield%E6%96%B9%E6%B3%95.html","title":"Java多线程编程-常用方法-join yield方法","lang":"zh-CN","frontmatter":{"title":"Java多线程编程-常用方法-join yield方法","icon":"page","order":245,"author":"涎涎","date":"2023-01-17T19:15:07.000Z","isOriginal":true,"category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java多线程编程-常用方法-join yield方法"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/245-Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-join%20yield%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java多线程编程-常用方法-join yield方法"}],["meta",{"property":"og:description","content":"245-Java多线程编程-常用方法-join &amp; yield方法.md 概念 示例代码 package com.tencent.chapter04.常用方法; /** * join:导致当前线程等待，直到调用该方法之前的所有线程执行结束 */ public class JoinDemo { \\tpublic static void main(String[] args) { \\t\\tThread4 t1 = new Thread4(1,10); \\t\\tt1.start(); \\t\\t \\t\\tThread4 t2 = new Thread4(11,20); \\t\\tt2.start(); \\t\\t \\t\\ttry { \\t\\t\\tt2.join();//让t2插队，让t2之前的所有线程先执行完成，后续的代码才可以继续执行 \\t\\t} catch (InterruptedException e1) { \\t\\t\\te1.printStackTrace(); \\t\\t} \\t\\t \\t\\t \\t\\tfor (int i = 100; i &lt;= 110; i++) { \\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i); \\t\\t\\t \\t\\t\\ttry { \\t\\t\\t\\tThread.sleep(500); \\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} } class Thread4 extends Thread{ \\tprivate int begin; \\tprivate int end; \\t \\tpublic Thread4(int begin,int end) \\t{ \\t\\tthis.begin = begin; \\t\\tthis.end = end; \\t} \\t \\t@Override \\tpublic void run() { \\t\\tfor (int i = begin; i &lt;= end; i++) { \\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i); \\t\\t\\t \\t\\t\\ttry { \\t\\t\\t\\tThread.sleep(500); \\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T13:47:22.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-17T19:15:07.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T13:47:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程编程-常用方法-join yield方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-17T19:15:07.000Z\\",\\"dateModified\\":\\"2023-05-21T13:47:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"245-Java多线程编程-常用方法-join &amp; yield方法.md 概念 示例代码 package com.tencent.chapter04.常用方法; /** * join:导致当前线程等待，直到调用该方法之前的所有线程执行结束 */ public class JoinDemo { \\tpublic static void main(String[] args) { \\t\\tThread4 t1 = new Thread4(1,10); \\t\\tt1.start(); \\t\\t \\t\\tThread4 t2 = new Thread4(11,20); \\t\\tt2.start(); \\t\\t \\t\\ttry { \\t\\t\\tt2.join();//让t2插队，让t2之前的所有线程先执行完成，后续的代码才可以继续执行 \\t\\t} catch (InterruptedException e1) { \\t\\t\\te1.printStackTrace(); \\t\\t} \\t\\t \\t\\t \\t\\tfor (int i = 100; i &lt;= 110; i++) { \\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i); \\t\\t\\t \\t\\t\\ttry { \\t\\t\\t\\tThread.sleep(500); \\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} } class Thread4 extends Thread{ \\tprivate int begin; \\tprivate int end; \\t \\tpublic Thread4(int begin,int end) \\t{ \\t\\tthis.begin = begin; \\t\\tthis.end = end; \\t} \\t \\t@Override \\tpublic void run() { \\t\\tfor (int i = begin; i &lt;= end; i++) { \\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i); \\t\\t\\t \\t\\t\\ttry { \\t\\t\\t\\tThread.sleep(500); \\t\\t\\t} catch (InterruptedException e) { \\t\\t\\t\\te.printStackTrace(); \\t\\t\\t} \\t\\t} \\t} }"},"headers":[],"git":{"createdTime":1684145400000,"updatedTime":1684676842000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":3}]},"readingTime":{"minutes":1.54,"words":462},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/245-Java多线程编程-常用方法-join yield方法.md","localizedDate":"2023年1月17日","excerpt":"<!-- more -->\\n<h1> 245-Java多线程编程-常用方法-join &amp; <a href=\\"http://xn--yield-n60k442b.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">yield方法.md</a></h1>\\n<h4> 概念</h4>\\n<figure><img src=\\"/assets/Java_244_1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h4> 示例代码</h4>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter04.常用方法;\\n\\n/**\\n * join:导致当前线程等待，直到调用该方法之前的所有线程执行结束\\n */\\npublic class JoinDemo {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tThread4 t1 = new Thread4(1,10);\\n\\t\\tt1.start();\\n\\t\\t\\n\\t\\tThread4 t2 = new Thread4(11,20);\\n\\t\\tt2.start();\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tt2.join();//让t2插队，让t2之前的所有线程先执行完成，后续的代码才可以继续执行\\n\\t\\t} catch (InterruptedException e1) {\\n\\t\\t\\te1.printStackTrace();\\n\\t\\t}\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (int i = 100; i &lt;= 110; i++) {\\n\\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i);\\n\\t\\t\\t\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tThread.sleep(500);\\n\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nclass Thread4 extends Thread{\\n\\n\\tprivate int begin;\\n\\tprivate int end;\\n\\t\\n\\tpublic Thread4(int begin,int end)\\n\\t{\\n\\t\\tthis.begin = begin;\\n\\t\\tthis.end = end;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic void run() {\\n\\t\\tfor (int i = begin; i &lt;= end; i++) {\\n\\t\\t\\tSystem.out.println(Thread.currentThread().getName() + \\":\\" + i);\\n\\t\\t\\t\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tThread.sleep(500);\\n\\t\\t\\t} catch (InterruptedException e) {\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
