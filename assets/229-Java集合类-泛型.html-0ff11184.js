const t=JSON.parse('{"key":"v-58770430","path":"/zh/programBlog/ServerSideLanguage/Java/229-Java%E9%9B%86%E5%90%88%E7%B1%BB-%E6%B3%9B%E5%9E%8B.html","title":"Java集合类-泛型","lang":"zh-CN","frontmatter":{"title":"Java集合类-泛型","icon":"page","order":229,"author":"涎涎","date":"2023-01-12T19:19:38.000Z","isOriginal":true,"category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java集合类-泛型"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/229-Java%E9%9B%86%E5%90%88%E7%B1%BB-%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java集合类-泛型"}],["meta",{"property":"og:description","content":"229-Java集合类-泛型.md 示例代码 package com.tencent.chapter02.泛型; import java.util.ArrayList; import java.util.HashMap; import java.util.Map.Entry; import java.util.Set; public class _01泛型 { \\tpublic static void main(String[] args) { \\t\\t/** \\t\\t * 没有使用泛型： \\t\\t * \\t\\t1.集合中可以添加任意类型的元素 \\t\\t * \\t\\t2.导致获取元素时，只允许使用Object来接收，如果需要转换为元素的原始类型，需要强制转换 \\t\\t * \\t\\t3.容易出现造型错误 \\t\\t */ \\t\\tArrayList list = new ArrayList(); \\t\\tlist.add(null); \\t\\tlist.add(null); \\t\\tlist.add(\\"abc\\"); \\t\\tlist.add(new String(\\"abc\\")); \\t\\tlist.add(10); \\t\\tlist.add(true); \\t\\t \\t\\tfor (Object object : list) { \\t\\t\\t//System.out.println(object); \\t\\t\\tgetType(object); \\t\\t} \\t\\t \\t\\t/** \\t\\t * 使用泛型： \\t\\t * \\t\\t1.集合中指定添加元素的类型 \\t\\t * \\t 2.遍历获取元素时，不需要再强制转换 \\t\\t * \\t\\t * \\t\\t约束集合中只允许添加String类型的元素： \\t\\t\\t\\t\\tArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); \\t\\t\\t\\t\\t \\t\\t * \\t\\t约束集合中只允许添加Integer类型的元素： \\t\\t\\t\\t\\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); \\t\\t * \\t\\t约束集合中key为Integer类型，value为String类型： \\t\\t\\t\\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(); \\t\\t */ \\t\\t//约束集合中只允许添加String类型的元素： \\t\\tArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); \\t\\tlist2.add(\\"abc\\"); \\t\\t//list2.add(10); \\t\\tlist2.add(\\"d\\"); \\t\\tlist2.add(\\"e\\"); \\t\\tlist2.add(\\"f\\"); \\t\\t \\t\\tfor (String element : list2) { \\t\\t\\tSystem.out.println(element); \\t\\t} \\t\\t \\t\\t//约束集合中key为Integer类型，value为String类型： \\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(); \\t\\tmap.put(1, \\"张三\\"); \\t\\tmap.put(2, \\"李四\\"); \\t\\tmap.put(3, \\"王五\\"); \\t\\t \\t\\tSet&lt;Entry&lt;Integer, String&gt;&gt; entrySet = map.entrySet(); \\t\\tfor (Entry&lt;Integer, String&gt; entry : entrySet) { \\t\\t\\tInteger key = entry.getKey(); \\t\\t\\tString value = entry.getValue(); \\t\\t\\t \\t\\t\\tSystem.out.println(key +\\" \\" + value); \\t\\t} \\t} \\t/** \\t * 获取指定对象的原始类型 \\t * @param object \\t */ \\tprivate static void getType(Object object) { \\t\\tif(object instanceof String) \\t\\t{ \\t\\t\\tString str = (String)object; \\t\\t\\tSystem.out.println(str + \\"是一个String\\"); \\t\\t} \\t\\telse if(object instanceof Integer) \\t\\t{ \\t\\t\\tInteger inte = (Integer)object; \\t\\t\\tSystem.out.println(inte + \\"是一个Integer\\"); \\t\\t} \\t\\telse if(object instanceof Boolean) \\t\\t{ \\t\\t\\tBoolean bool = (Boolean)object; \\t\\t\\tSystem.out.println(bool + \\"是一个Boolean\\"); \\t\\t} \\t\\telse \\t\\t{ \\t\\t\\tSystem.out.println(object + \\"是一个未识别的类型\\"); \\t\\t} \\t} \\t }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-21T20:37:04.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-01-12T19:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T20:37:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java集合类-泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-12T19:19:38.000Z\\",\\"dateModified\\":\\"2023-05-21T20:37:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"229-Java集合类-泛型.md 示例代码 package com.tencent.chapter02.泛型; import java.util.ArrayList; import java.util.HashMap; import java.util.Map.Entry; import java.util.Set; public class _01泛型 { \\tpublic static void main(String[] args) { \\t\\t/** \\t\\t * 没有使用泛型： \\t\\t * \\t\\t1.集合中可以添加任意类型的元素 \\t\\t * \\t\\t2.导致获取元素时，只允许使用Object来接收，如果需要转换为元素的原始类型，需要强制转换 \\t\\t * \\t\\t3.容易出现造型错误 \\t\\t */ \\t\\tArrayList list = new ArrayList(); \\t\\tlist.add(null); \\t\\tlist.add(null); \\t\\tlist.add(\\"abc\\"); \\t\\tlist.add(new String(\\"abc\\")); \\t\\tlist.add(10); \\t\\tlist.add(true); \\t\\t \\t\\tfor (Object object : list) { \\t\\t\\t//System.out.println(object); \\t\\t\\tgetType(object); \\t\\t} \\t\\t \\t\\t/** \\t\\t * 使用泛型： \\t\\t * \\t\\t1.集合中指定添加元素的类型 \\t\\t * \\t 2.遍历获取元素时，不需要再强制转换 \\t\\t * \\t\\t * \\t\\t约束集合中只允许添加String类型的元素： \\t\\t\\t\\t\\tArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); \\t\\t\\t\\t\\t \\t\\t * \\t\\t约束集合中只允许添加Integer类型的元素： \\t\\t\\t\\t\\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); \\t\\t * \\t\\t约束集合中key为Integer类型，value为String类型： \\t\\t\\t\\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(); \\t\\t */ \\t\\t//约束集合中只允许添加String类型的元素： \\t\\tArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); \\t\\tlist2.add(\\"abc\\"); \\t\\t//list2.add(10); \\t\\tlist2.add(\\"d\\"); \\t\\tlist2.add(\\"e\\"); \\t\\tlist2.add(\\"f\\"); \\t\\t \\t\\tfor (String element : list2) { \\t\\t\\tSystem.out.println(element); \\t\\t} \\t\\t \\t\\t//约束集合中key为Integer类型，value为String类型： \\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(); \\t\\tmap.put(1, \\"张三\\"); \\t\\tmap.put(2, \\"李四\\"); \\t\\tmap.put(3, \\"王五\\"); \\t\\t \\t\\tSet&lt;Entry&lt;Integer, String&gt;&gt; entrySet = map.entrySet(); \\t\\tfor (Entry&lt;Integer, String&gt; entry : entrySet) { \\t\\t\\tInteger key = entry.getKey(); \\t\\t\\tString value = entry.getValue(); \\t\\t\\t \\t\\t\\tSystem.out.println(key +\\" \\" + value); \\t\\t} \\t} \\t/** \\t * 获取指定对象的原始类型 \\t * @param object \\t */ \\tprivate static void getType(Object object) { \\t\\tif(object instanceof String) \\t\\t{ \\t\\t\\tString str = (String)object; \\t\\t\\tSystem.out.println(str + \\"是一个String\\"); \\t\\t} \\t\\telse if(object instanceof Integer) \\t\\t{ \\t\\t\\tInteger inte = (Integer)object; \\t\\t\\tSystem.out.println(inte + \\"是一个Integer\\"); \\t\\t} \\t\\telse if(object instanceof Boolean) \\t\\t{ \\t\\t\\tBoolean bool = (Boolean)object; \\t\\t\\tSystem.out.println(bool + \\"是一个Boolean\\"); \\t\\t} \\t\\telse \\t\\t{ \\t\\t\\tSystem.out.println(object + \\"是一个未识别的类型\\"); \\t\\t} \\t} \\t }"},"headers":[],"git":{"createdTime":1684701424000,"updatedTime":1684701424000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":1.89,"words":568},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/229-Java集合类-泛型.md","localizedDate":"2023年1月12日","excerpt":"<!-- more -->\\n<h1> <a href=\\"http://xn--229-Java--7t8o822avw0exp1bm6ye.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">229-Java集合类-泛型.md</a></h1>\\n<h4> 示例代码</h4>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>package com.tencent.chapter02.泛型;\\n\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.Map.Entry;\\nimport java.util.Set;\\n\\npublic class _01泛型 {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\t/**\\n\\t\\t * 没有使用泛型：\\n\\t\\t * \\t\\t1.集合中可以添加任意类型的元素\\n\\t\\t * \\t\\t2.导致获取元素时，只允许使用Object来接收，如果需要转换为元素的原始类型，需要强制转换\\n\\t\\t * \\t\\t3.容易出现造型错误\\n\\t\\t */\\n\\t\\tArrayList list = new ArrayList();\\n\\t\\tlist.add(null);\\n\\t\\tlist.add(null);\\n\\t\\tlist.add(\\"abc\\");\\n\\t\\tlist.add(new String(\\"abc\\"));\\n\\t\\tlist.add(10);  \\n\\t\\tlist.add(true);\\n\\t\\t\\n\\t\\tfor (Object object : list) {\\n\\t\\t\\t//System.out.println(object);\\n\\t\\t\\tgetType(object);\\n\\t\\t}\\n\\t\\t\\n\\t\\t/**\\n\\t\\t * 使用泛型：\\n\\t\\t * \\t\\t1.集合中指定添加元素的类型\\n\\t\\t * \\t    2.遍历获取元素时，不需要再强制转换\\n\\t\\t * \\n\\t\\t * \\t\\t约束集合中只允许添加String类型的元素：\\n  \\t\\t\\t\\t\\tArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\\n  \\t\\t\\t\\t\\t\\n\\t\\t * \\t\\t约束集合中只允许添加Integer类型的元素：\\n  \\t\\t\\t\\t\\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\\n\\n\\t\\t * \\t\\t约束集合中key为Integer类型，value为String类型：\\n  \\t\\t\\t\\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;();\\n\\n\\t\\t */\\n\\t\\t//约束集合中只允许添加String类型的元素：\\n\\t\\tArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;();\\n\\t\\tlist2.add(\\"abc\\");\\n\\t\\t//list2.add(10);\\n\\t\\tlist2.add(\\"d\\");\\n\\t\\tlist2.add(\\"e\\");\\n\\t\\tlist2.add(\\"f\\");\\n\\t\\t\\n\\t\\tfor (String element : list2) {\\n\\t\\t\\tSystem.out.println(element);\\n\\t\\t}\\n\\t\\t\\n\\t\\t//约束集合中key为Integer类型，value为String类型：\\n\\t\\tHashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;();\\n\\t\\tmap.put(1, \\"张三\\");\\n\\t\\tmap.put(2, \\"李四\\");\\n\\t\\tmap.put(3, \\"王五\\");\\n\\t\\t\\n\\t\\tSet&lt;Entry&lt;Integer, String&gt;&gt; entrySet = map.entrySet();\\n\\t\\tfor (Entry&lt;Integer, String&gt; entry : entrySet) {\\n\\t\\t\\tInteger key = entry.getKey();\\n\\t\\t\\tString value = entry.getValue();\\n\\t\\t\\t\\n\\t\\t\\tSystem.out.println(key +\\"  \\" + value);\\n\\t\\t}\\n\\t}\\n\\t/**\\n\\t * 获取指定对象的原始类型\\n\\t * @param object\\n\\t */\\n\\tprivate static void getType(Object object) {\\n\\t\\tif(object instanceof String)\\n\\t\\t{\\n\\t\\t\\tString str = (String)object;\\n\\t\\t\\tSystem.out.println(str + \\"是一个String\\");\\n\\t\\t}\\n\\t\\telse if(object instanceof Integer)\\n\\t\\t{\\n\\t\\t\\tInteger inte = (Integer)object;\\n\\t\\t\\tSystem.out.println(inte + \\"是一个Integer\\");\\n\\t\\t}\\n\\t\\telse if(object instanceof Boolean)\\n\\t\\t{\\n\\t\\t\\tBoolean bool = (Boolean)object;\\n\\t\\t\\tSystem.out.println(bool + \\"是一个Boolean\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tSystem.out.println(object + \\"是一个未识别的类型\\");\\n\\t\\t}\\n\\t}\\n\\t\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
