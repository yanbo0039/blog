import{_ as n,X as s,Y as a,a1 as t,a0 as e}from"./framework-68dd73a2.js";const p={},o=e(`<h1 id="websocket简介" tabindex="-1"><a class="header-anchor" href="#websocket简介" aria-hidden="true">#</a> WebSocket简介</h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p></div><h3 id="websocket-到底是一项什么技术" tabindex="-1"><a class="header-anchor" href="#websocket-到底是一项什么技术" aria-hidden="true">#</a> WebSocket 到底是一项什么技术</h3><blockquote><p>WebSocket是一种基于TCP协议的网络通信协议， 它提供了全双工、实时的通信能力， 可以在客户端和服务器之间建立持久化的连接， 使得服务器可以主动向客户端推送数据。</p></blockquote><blockquote><p>WebSocket协议通过HTTP/HTTPS协议进行握手， 然后在客户端和服务器之间建立一条持久化的TCP连接。 与HTTP协议不同的是，WebSocket协议在建立连接后， 客户端和服务器之间可以直接发送数据， 而不需要像HTTP协议那样每次发送请求时都需要重新建立连接。</p></blockquote><ul><li>WebSocket协议具有以下特点：</li></ul><ol><li><p>实时性：WebSocket协议可以实现实时通信，客户端和服务器之间可以直接发送数据，而不需要像HTTP协议那样每次发送请求时都需要重新建立连接。</p></li><li><p>全双工：WebSocket协议支持全双工通信，客户端和服务器之间可以同时发送和接收数据。</p></li><li><p>低延迟：WebSocket协议可以减少通信延迟，因为客户端和服务器之间建立了持久化的连接，而不需要每次发送请求时都重新建立连接。</p></li><li><p>跨域支持：WebSocket协议可以跨域使用，因为它是基于TCP协议进行通信的，而不是基于HTTP协议。</p></li></ol><blockquote><p>WebSocket协议在Web应用中广泛应用， 例如聊天应用、在线游戏、实时监控等。 它可以使得客户端和服务器之间的通信更加实时、 高效和可靠。</p></blockquote><h3 id="websocket属于前端技术还是后端的技术" tabindex="-1"><a class="header-anchor" href="#websocket属于前端技术还是后端的技术" aria-hidden="true">#</a> WebSocket属于前端技术还是后端的技术</h3><blockquote><p>WebSocket是一种跨前端和后端的技术， 它可以在客户端和服务器之间建立持久化的连接， 使得服务器可以主动向客户端推送数据。 因此，WebSocket既涉及到前端的技术，也涉及到后端的技术。</p></blockquote><blockquote><p>在前端开发中，WebSocket通常通过JavaScript API进行调用， 例如使用WebSocket对象来建立WebSocket连接、发送数据、 接收数据等。前端开发人员需要了解WebSocket协议的特点和使用方法， 以便正确地使用WebSocket API。</p></blockquote><blockquote><p>在后端开发中，WebSocket通常需要使用特定的库或框架来实现。 例如，在Node.js中可以使用ws模块来实现WebSocket通信。 后端开发人员需要了解WebSocket协议的特点和实现原理， 以便正确地实现WebSocket服务器。</p></blockquote><blockquote><p>因此，WebSocket是一种跨前端和后端的技术， 需要前后端开发人员共同协作才能实现完整的功能。</p></blockquote><h3 id="一个简单的websocket实例" tabindex="-1"><a class="header-anchor" href="#一个简单的websocket实例" aria-hidden="true">#</a> 一个简单的WebSocket实例</h3><ul><li><p>以下是一个简单的WebSocket实例，包含前端和后端的代码。</p></li><li><p>前端代码（使用JavaScript实现）：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建WebSocket对象</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接成功时触发</span>
socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket连接已建立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 发送消息到服务器</span>
  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, WebSocket!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 接收到消息时触发</span>
socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;接收到消息：&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 连接关闭时触发</span>
socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket连接已关闭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后端代码（使用Node.js实现）：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建WebSocket服务器</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听连接事件</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket连接已建立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 接收到消息时触发</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;接收到消息：&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送消息到客户端</span>
    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, Client!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 连接关闭时触发</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket连接已关闭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码演示了一个简单的 WebSocket 通信过程。 当客户端连接到服务器后，会发送一条消息到服务器， 服务器接收到消息后会向客户端发送一条回复。 客户端接收到服务器的回复后会输出到控制台上。</p></blockquote><ul><li>需要注意的是，以上代码仅作为演示用途，</li><li>实际应用中需要考虑更多的因素，</li><li>例如错误处理、安全性等。</li></ul><h3 id="java实现的-websocket-实例" tabindex="-1"><a class="header-anchor" href="#java实现的-websocket-实例" aria-hidden="true">#</a> Java实现的 WebSocket 实例</h3><ul><li>以下是一个简单的WebSocket实例，使用Java语言实现WebSocket服务器端：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token class-name">OnClose</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token class-name">OnMessage</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token class-name">OnOpen</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token class-name">Session</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpoint</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/websocket&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Session</span><span class="token punctuation">&gt;</span></span> sessions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OnOpen</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket连接已建立&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnMessage</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息：&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> s <span class="token operator">:</span> sessions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, WebSocket!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnClose</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket连接已关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码演示了一个简单的WebSocket服务器端实现。 当客户端连接到服务器后，会触发<code>onOpen</code>方法， 将客户端的Session对象保存到一个Set集合中。 当客户端发送消息时，会触发<code>onMessage</code>方法， 服务器会向所有客户端发送一条回复消息。 当客户端关闭连接时，会触发<code>onClose</code>方法， 将客户端的Session对象从Set集合中移除。</p></blockquote><blockquote><p>需要注意的是，以上代码仅作为演示用途， 实际应用中需要考虑更多的因素， 例如错误处理、安全性等。</p></blockquote><h3 id="与-websocket-类似的主流技术" tabindex="-1"><a class="header-anchor" href="#与-websocket-类似的主流技术" aria-hidden="true">#</a> 与 WebSocket 类似的主流技术</h3><ul><li>除了WebSocket，还有以下几种跨前后端的技术：</li></ul><ol><li><p>Server-Sent Events（SSE）：SSE是一种基于HTTP协议的服务器推送技术，它允许服务器向客户端推送数据，而不需要客户端发送请求。SSE只支持单向通信，即服务器向客户端推送数据，不能由客户端向服务器发送数据。</p></li><li><p>Long Polling：Long Polling是一种基于HTTP协议的服务器推送技术，它允许客户端向服务器发送请求，服务器在有新数据时立即返回响应，否则保持连接不返回响应。客户端在收到响应后立即发送下一次请求，以保持连接。Long Polling可以实现类似于WebSocket的实时通信效果，但是需要频繁地建立和关闭连接，会增加服务器的负担。</p></li><li><p>WebRTC：WebRTC是一种基于浏览器的实时通信技术，它允许浏览器之间直接建立点对点的连接，进行音视频通话、文件传输等操作。WebRTC可以实现类似于WebSocket的实时通信效果，但是需要浏览器支持，并且需要特定的服务器进行中转。</p></li></ol><blockquote><p>总之，除了WebSocket之外， 还有多种跨前后端的技术可以实现实时通信和服务器推送功能， 开发人员可以根据具体需求选择合适的技术。</p></blockquote><hr><h3 id="分割线" tabindex="-1"><a class="header-anchor" href="#分割线" aria-hidden="true">#</a> 分割线</h3><hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>以上就是我关于 <em>WebSocket简介</em> 知识点的整理与总结的全部内容，希望对你有帮助。。。。。。。</strong></p></div>`,33);function c(l,i){return s(),a("div",null,[t(" more "),o])}const k=n(p,[["render",c],["__file","vue43.html.vue"]]);export{k as default};
