const n=JSON.parse('{"key":"v-e0a19edc","path":"/zh/programBlog/ServerSideLanguage/Java/java280.html","title":"Java缓存使用简单示例","lang":"zh-CN","frontmatter":{"title":"Java缓存使用简单示例","icon":"page","sticky":20230620153300,"order":280,"author":"涎涎","date":"2023-06-20T15:33:00.000Z","isOriginal":true,"permalinkPattern":"programBlog/ServerSideLanguage/Java/java280.html","category":["Java"],"tag":["Java"],"head":[["meta",{"name":"keywords","content":"Java缓存使用简单示例"}],["meta",{"property":"og:url","content":"https://yanbo0039.github.io/blog/blog/zh/programBlog/ServerSideLanguage/Java/java280.html"}],["meta",{"property":"og:site_name","content":"涎涎的博客"}],["meta",{"property":"og:title","content":"Java缓存使用简单示例"}],["meta",{"property":"og:description","content":"Java缓存使用简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 在 Java 中，常见的缓存使用方式是通过使用缓存库或框架来管理缓存数据。以下是两种常见的缓存使用示例： 使用 Redis 缓存： Redis 是一种内存数据存储系统，常用于缓存和提高数据访问性能。下面是一个使用 Redis 缓存的示例： // 创建 Redis 连接 Jedis jedis = new Jedis(\\"localhost\\", 6379); // 设置缓存数据 String key = \\"myKey\\"; String value = \\"myValue\\"; jedis.set(key, value); // 获取缓存数据 String cachedValue = jedis.get(key); System.out.println(\\"Cached Value: \\" + cachedValue); // 关闭 Redis 连接 jedis.close(); 在这个示例中，我们使用 Jedis 客户端与 Redis 进行交互。首先，我们通过 set 方法设置了一个键值对，并使用 get 方法获取缓存数据。 使用 Spring Cache： Spring 框架提供了对缓存的支持，可以通过注解的方式简化缓存操作。以下是一个使用 Spring Cache 的示例： @Service public class ProductService { @Cacheable(\\"products\\") public List&lt;Product&gt; getAllProducts() { // 从数据库中获取产品数据 List&lt;Product&gt; products = productRepository.findAll(); return products; } } 在这个示例中，@Cacheable 注解被应用在 getAllProducts 方法上，指定了一个名为 \\"products\\" 的缓存区域。 当调用这个方法时，Spring 会首先检查缓存中是否存在对应的数据，如果存在则直接返回缓存数据，如果不存在则从数据库中获取数据， 并将其存入缓存中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:54:48.000Z"}],["meta",{"property":"article:author","content":"涎涎"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-06-20T15:33:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:54:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java缓存使用简单示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-20T15:33:00.000Z\\",\\"dateModified\\":\\"2024-02-21T09:54:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"涎涎\\"}]}"]],"description":"Java缓存使用简单示例 注意 本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。 在 Java 中，常见的缓存使用方式是通过使用缓存库或框架来管理缓存数据。以下是两种常见的缓存使用示例： 使用 Redis 缓存： Redis 是一种内存数据存储系统，常用于缓存和提高数据访问性能。下面是一个使用 Redis 缓存的示例： // 创建 Redis 连接 Jedis jedis = new Jedis(\\"localhost\\", 6379); // 设置缓存数据 String key = \\"myKey\\"; String value = \\"myValue\\"; jedis.set(key, value); // 获取缓存数据 String cachedValue = jedis.get(key); System.out.println(\\"Cached Value: \\" + cachedValue); // 关闭 Redis 连接 jedis.close(); 在这个示例中，我们使用 Jedis 客户端与 Redis 进行交互。首先，我们通过 set 方法设置了一个键值对，并使用 get 方法获取缓存数据。 使用 Spring Cache： Spring 框架提供了对缓存的支持，可以通过注解的方式简化缓存操作。以下是一个使用 Spring Cache 的示例： @Service public class ProductService { @Cacheable(\\"products\\") public List&lt;Product&gt; getAllProducts() { // 从数据库中获取产品数据 List&lt;Product&gt; products = productRepository.findAll(); return products; } } 在这个示例中，@Cacheable 注解被应用在 getAllProducts 方法上，指定了一个名为 \\"products\\" 的缓存区域。 当调用这个方法时，Spring 会首先检查缓存中是否存在对应的数据，如果存在则直接返回缓存数据，如果不存在则从数据库中获取数据， 并将其存入缓存中。"},"headers":[{"level":3,"title":"分割线","slug":"分割线","link":"#分割线","children":[]}],"git":{"createdTime":1708509288000,"updatedTime":1708509288000,"contributors":[{"name":"涎涎","email":"yanbo0039@yeah.net","commits":1}]},"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"zh/programBlog/ServerSideLanguage/Java/280-Java缓存使用简单示例.md","localizedDate":"2023年6月20日","excerpt":"<!-- more -->\\n<!-- sticky -->\\n<h1> Java缓存使用简单示例</h1>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>本博文仅供学术研究和交流参考，严禁将其用于商业用途。如因违规使用产生的任何法律问题，使用者需自行负责。</p>\\n</div>\\n<blockquote>\\n<p>在 Java 中，常见的缓存使用方式是通过使用缓存库或框架来管理缓存数据。以下是两种常见的缓存使用示例：</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p>使用 Redis 缓存：\\nRedis 是一种内存数据存储系统，常用于缓存和提高数据访问性能。下面是一个使用 Redis 缓存的示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 创建 Redis 连接</span>\\n<span class=\\"token class-name\\">Jedis</span> jedis <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Jedis</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"localhost\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6379</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 设置缓存数据</span>\\n<span class=\\"token class-name\\">String</span> key <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"myKey\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> value <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"myValue\\"</span><span class=\\"token punctuation\\">;</span>\\njedis<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取缓存数据</span>\\n<span class=\\"token class-name\\">String</span> cachedValue <span class=\\"token operator\\">=</span> jedis<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Cached Value: \\"</span> <span class=\\"token operator\\">+</span> cachedValue<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 关闭 Redis 连接</span>\\njedis<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在这个示例中，我们使用 Jedis 客户端与 Redis 进行交互。首先，我们通过 <code>set</code> 方法设置了一个键值对，并使用 <code>get</code> 方法获取缓存数据。</p>\\n</li>\\n<li>\\n<p>使用 Spring Cache：\\nSpring 框架提供了对缓存的支持，可以通过注解的方式简化缓存操作。以下是一个使用 Spring Cache 的示例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProductService</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Cacheable</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"products\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Product</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getAllProducts</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 从数据库中获取产品数据</span>\\n        <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Product</span><span class=\\"token punctuation\\">&gt;</span></span> products <span class=\\"token operator\\">=</span> productRepository<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">findAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> products<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在这个示例中，<code>@Cacheable</code> 注解被应用在 <code>getAllProducts</code> 方法上，指定了一个名为 \\"products\\" 的缓存区域。\\n当调用这个方法时，Spring 会首先检查缓存中是否存在对应的数据，如果存在则直接返回缓存数据，如果不存在则从数据库中获取数据，\\n并将其存入缓存中。</p>\\n</li>\\n</ol>","autoDesc":true}');export{n as data};
