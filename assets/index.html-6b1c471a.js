import{_ as a,X as c,Y as n,a1 as r,Z as e,$ as o,a2 as s,a0 as i,F as l}from"./framework-68dd73a2.js";const d="/blog/assets/Java_70_1.png",p={},h={id:"_70-java-springmvc的异常处理思路-md",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#_70-java-springmvc的异常处理思路-md","aria-hidden":"true"},"#",-1),_={href:"http://xn--70-Java-springMVC-h864ac47dotd4ph221kf8l940l.md",target:"_blank",rel:"noopener noreferrer"},b=i('<h4 id="异常处理思路" tabindex="-1"><a class="header-anchor" href="#异常处理思路" aria-hidden="true">#</a> 异常处理思路</h4><blockquote><p>系统中异常包括两类</p></blockquote><blockquote><blockquote><p>预期异常和运行时异常RuntimeException</p></blockquote></blockquote><blockquote><blockquote><p>前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生</p></blockquote></blockquote><blockquote><p>springmvc在处理请求过程中出现异常信息交由异常处理器进行处理，自定义异常处理器可以实现一个系统的异常处理逻辑。</p></blockquote><blockquote><blockquote><p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p></blockquote></blockquote><blockquote><blockquote><p>springmvc提供全局异常处理器（一个系统只有一个异常处理器）进行统一异常处理。</p></blockquote></blockquote><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以上就是我关于 Java-springMVC的异常处理思路 知识点的整理与总结的全部内容</strong></p><hr><h3 id="分割线" tabindex="-1"><a class="header-anchor" href="#分割线" aria-hidden="true">#</a> 分割线</h3><hr><p><strong>博主为咯学编程：父母不同意学编程，现已断绝关系;恋人不同意学编程，现已分手;亲戚不同意学编程，现已断绝来往;老板不同意学编程,现已失业三十年。。。。。。如果此博文有帮到你欢迎打赏，金额不限。。。</strong></p>',13);function k(m,g){const t=l("ExternalLinkIcon");return c(),n("div",null,[r(" more "),e("h1",h,[u,o(),e("a",_,[o("70-Java-springMVC的异常处理思路.md"),s(t)])]),b])}const f=a(p,[["render",k],["__file","index.html.vue"]]);export{f as default};
